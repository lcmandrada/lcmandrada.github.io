{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi","text":""},{"location":"notes/code-problems/","title":"Code Problems","text":""},{"location":"notes/code-problems/#arrays","title":"Arrays","text":""},{"location":"notes/code-problems/#best-time-to-buy-and-sell-stock-ii","title":"Best Time to Buy and Sell Stock II","text":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the ith day. Find and return the maximum profit you can achieve.</p> <p>Example <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</code></pre></p> <p>Solution Simple One Pass Crawl over the slope and keep on adding the profit obtained from every valid consecutive transaction when the second number is larger than the first one. <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    total_profit = 0\n\n    for i in range(1, len(prices)):\n        if prices[i] &gt; prices[i - 1]:\n            total_profit += prices[i] - prices[i -1]\n\n    return total_profit\n</code></pre></p>"},{"location":"notes/code-problems/#remove-duplicates-from-sorted-array","title":"Remove Duplicates from Sorted Array","text":"<p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</p> <p>Example <pre><code>Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre></p> <p>Solution Two Pointers Use two pointers tracking the latest index for a unique item and the current item iteration. When the latest unique item is different from the current item (when duplication ends), assign the current item to the next unique index. <pre><code>def removeDuplicates(self, nums: List[int]) -&gt; int:\n    unique_index = 0\n\n    for index in range(1, len(nums)):\n        if nums[unique_index] != nums[index]:\n            unique_index += 1\n            nums[unique_index] = nums[index]\n\n    return unique_index + 1\n</code></pre></p>"},{"location":"notes/code-problems/#rotate-array","title":"Rotate Array","text":"<p>Given an array, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p> <p>Example <pre><code>Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def rotate(self, nums: List[int], k: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # get modulo as any multiples of the array length\n        # will produce the same array when rotated\n        k %= len(nums)\n\n        # reverse the whole array\n        self.reverse(nums, 0, len(nums)-1)\n        # reverse the left side of k to restore left side order\n        self.reverse(nums, 0, k-1)\n        # reverse the right side of k to restore right side order\n        self.reverse(nums, k, len(nums)-1)\n\n    def reverse(self, array: List[int], left: int, right: int) -&gt; None:\n        \"\"\"Reverses an array about the span of the given left and right indices.\"\"\"\n        while left &lt; right:\n            # switch items\n            array[left], array[right] = array[right], array[left]\n\n            # crawl the span\n            left += 1\n            right -= 1\n</code></pre></p>"},{"location":"notes/code-problems/#contains-duplicate","title":"Contains Duplicate","text":"<p>Given an integer array <code>nums</code>, return true if any value appears at least twice in the array, and return false if every element is distinct.</p> <p>Example <pre><code>Input: nums = [1,2,3,1]\nOutput: true\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def containsDuplicate(self, nums: List[int]) -&gt; bool:\n        # set removes duplicity\n        return len(nums) != len(set(nums))\n</code></pre></p>"},{"location":"notes/code-problems/#single-number","title":"Single Number","text":"<p>Given a non-empty array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>Example <pre><code>Input: nums = [4,1,2,1,2]\nOutput: 4\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def singleNumber(self, nums: List[int]) -&gt; int:\n        # apply xor in running adjacents\n        # two instances of the same number will cancel each other\n        # only the odd instance will be left\n        return reduce(lambda x, y: x ^ y, nums, 0)\n</code></pre></p>"},{"location":"notes/code-problems/#intersection-of-two-arrays-ii","title":"Intersection of Two Arrays II","text":"<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p> <p>Example <pre><code>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n</code></pre></p> <p>Solution <pre><code>from collections import Counter\n\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n        # optimization\n        # iterate smaller array\n        if len(nums1) &gt; len(nums2):\n            self.intersect(nums2, nums1)\n\n        intersection = []\n        # count item instances\n        counter = Counter(nums1)\n\n        for num in nums2:\n            # add to intersection only if available in both arrays\n            if counter[num] &gt; 0:\n                intersection.append(num)\n                counter[num] -= 1\n\n        return intersection\n</code></pre></p>"},{"location":"notes/code-problems/#plus-one","title":"Plus One","text":"<p>You are given a large integer represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the ith digit of the integer. Increment the large integer by one and return the resulting array of digits.</p> <p>Example <pre><code>Input: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def plusOne(self, digits: List[int]) -&gt; List[int]:\n        for i in reversed(range(len(digits))):\n            if digits[i] &lt; 9:\n                # simply add 1 if &lt; 9 and immediately return\n                digits[i] += 1\n                return digits\n            # set 0 if 9 and allow loop to carry over\n            digits[i] = 0\n\n        # add leading 1 (carry over) if all other digits were 9\n        return [1] + digits\n</code></pre></p>"},{"location":"notes/code-problems/#move-zeroes","title":"Move Zeroes","text":"<p>Given an integer array <code>nums</code>, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Example <pre><code>Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        nzero_index = 0\n        # move all non-zeroes in front\n        # swap may also be used here\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[nzero_index] = nums[i]\n                nzero_index += 1\n\n        # fill the rest with 0\n        for j in range(nzero_index, len(nums)):\n            nums[j] = 0\n</code></pre></p>"},{"location":"notes/code-problems/#two-sum","title":"Two Sum","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to target.</p> <p>Example <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        # store iterated numbers with their indices\n        num_index = {}\n        for i, num in enumerate(nums):\n            # if the current number's addend was already iterated,\n            # return both their indices\n            if target - num in num_index:\n                return num_index[target - num], i\n            num_index[num] = i\n</code></pre></p>"},{"location":"notes/code-problems/#valid-sudoku","title":"Valid Sudoku","text":"<p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.</p> <p>Example <pre><code>Input: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8.\nSince there are two 8's in the top left 3x3 sub-box, it is invalid.\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -&gt; bool:\n        seen = set()\n\n        # traverse the 9x9 board\n        for row in range(9):\n            for col in range(9):\n                # skip .\n                if board[row][col] == \".\":\n                    continue\n\n                # record number as seen in row, col, box\n                row_entry = board[row][col] + \"@row\" + str(row)\n                col_entry = board[row][col] + \"@col\" + str(col)\n                # box is 3x3\n                box_entry = board[row][col] + \"@box\" + str(row // 3) + str(col // 3)\n\n                # if the number is already recorded,\n                # the board is invalid\n                if any((\n                    row_entry in seen,\n                    col_entry in seen,\n                    box_entry in seen,\n                )):\n                    return False\n\n                # record number\n                seen.add(row_entry)\n                seen.add(col_entry)\n                seen.add(box_entry)\n\n        return True\n</code></pre></p>"},{"location":"notes/code-problems/#rotate-image","title":"Rotate Image","text":"<p>You are given an <code>n x n</code> 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</p> <p>Example <pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def rotate(self, matrix: List[List[int]]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        # reverse rows for easier swapping\n        matrix.reverse()\n\n        for i in range(len(matrix)):\n            # i+1 is necessary as starting from 0 will reverse the swap\n            # from the previous iterations\n            for j in range(i+1, len(matrix)):\n                # distribute row items to other rows\n                # i.e. first row items go to other rows' first indices\n                # this can be achieved by swapping counterparts\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n</code></pre></p>"},{"location":"notes/code-problems/#strings","title":"Strings","text":""},{"location":"notes/code-problems/#reverse-string","title":"Reverse String","text":"<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>Example <pre><code>Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def reverseString(self, s: List[str]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        # shortcut\n        # s[:] = s[::-1]\n\n        # uses swap\n        l = 0\n        r = len(s) - 1\n\n        while l &lt; r:\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n</code></pre></p>"},{"location":"notes/code-problems/#reverse-integer","title":"Reverse Integer","text":"<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.</p> <p>Example <pre><code>Input: x = -123\nOutput: -321\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def reverse(self, x: int) -&gt; int:\n        ans = 0\n        sign = -1 if x &lt; 1 else 1\n        # get absolute value\n        x *= sign\n\n        while x:\n            # multiply ans by 10 to move the current ans to the next tens place\n            # add the modulo by 10 to get the number in ones place\n            # this will build a number from most to least significant\n            # by adding the numbers in ones place in each iteration\n            ans = ans * 10 + x % 10\n            # truncate the current ones place to process\n            # the next tens place in the next iteration\n            x //= 10\n\n        # restore sign\n        ans *= sign\n\n        # apply constraints\n        return ans if -2**31 &lt;= ans &lt;= 2**31 - 1 else 0\n</code></pre></p>"},{"location":"notes/code-problems/#first-unique-character-in-a-string","title":"First Unique Character in a String","text":"<p>Given a string <code>s</code>, find the first non-repeating character in it and return its index. If it does not exist, return -1.</p> <p>Example <pre><code>Input: s = \"loveleetcode\"\nOutput: 2\n</code></pre></p> <p>Solution <pre><code>from collections import Counter\n\nclass Solution:\n    def firstUniqChar(self, s: str) -&gt; int:\n        counter = Counter(s)\n\n        for i, char in enumerate(s):\n            # return index of current character\n            # if instance count is exactly 1\n            if counter[char] == 1:\n                return i\n\n        return -1\n</code></pre></p>"},{"location":"notes/code-problems/#valid-anagram","title":"Valid Anagram","text":"<p>Given two strings <code>s</code> and <code>t</code>, return true if <code>t</code> is an anagram of <code>s</code>, and false otherwise.</p> <p>Example <pre><code>Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\n</code></pre></p> <p>Solution <pre><code>from collections import Counter\n\nclass Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        # automatically not anagram if different lengths\n        if len(s) != len(t):\n            return False\n\n        counter = Counter(s)\n\n        for c in t:\n            # if a character in t doesn't exist in s, not anagram\n            if counter[c] == 0:\n                return False\n            # decrement to consider number of character instances\n            counter[c] -= 1\n\n        return True\n</code></pre></p>"},{"location":"notes/code-problems/#valid-palindrome","title":"Valid Palindrome","text":"<p>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string <code>s</code>, return true if it is a palindrome, or false otherwise.</p> <p>Example <pre><code>Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def isPalindrome(self, s: str) -&gt; bool:\n        l = 0\n        r = len(s) - 1\n\n        # traverse from each ends of the string\n        while l &lt; r:\n            # crawl until a valid left side character\n            while l &lt; r and not s[l].isalnum():\n                l += 1\n            # crawl until a valid right side character\n            while l &lt; r and not s[r].isalnum():\n                r -= 1\n            # if characters are not similar, not a palindrome\n            if s[l].lower() != s[r].lower():\n                return False\n            l += 1\n            r -= 1\n\n        return True\n</code></pre></p>"},{"location":"notes/code-problems/#string-to-integer-atoi","title":"String to Integer (atoi)","text":"<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).</p> <p>Example <pre><code>Input: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def myAtoi(self, s: str) -&gt; int:\n        s = s.strip()\n\n        if not s:\n            return 0\n\n        num = 0\n\n        # save sign and remove if available\n        sign = -1 if s[0] == \"-\" else 1\n        if s[0] in (\"-\", \"+\"):\n            s = s[1:]\n\n        for char in s:\n            if char.isdigit():\n                # shift current num to higher decimal place\n                # and add current character to ones place\n                # this builds the number by decimal place\n                num = num * 10 + ord(char) - ord(\"0\")\n            else:\n                break\n\n        num *= sign\n        lower_bound = -2**31\n        upper_bound = 2**31 - 1\n\n        if num &lt; lower_bound:\n            return lower_bound\n        elif num &gt; upper_bound:\n            return upper_bound\n\n        return num\n</code></pre></p>"},{"location":"notes/code-problems/#implement-strstr","title":"Implement strStr()","text":"<p>Return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or -1 if <code>needle</code> is not part of <code>haystack</code>.</p> <p>Example <pre><code>Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def strStr(self, haystack: str, needle: str) -&gt; int:\n        if not needle:\n            return 0\n\n        h_len = len(haystack)\n        n_len = len(needle)\n\n        for i in range(h_len - n_len + 1):\n            # check if the slice with the same length as needle\n            # is the same as needle\n            if haystack[i:i+n_len] == needle:\n                return i\n\n        return -1\n</code></pre></p>"},{"location":"notes/code-problems/#longest-common-prefix","title":"Longest Common Prefix","text":"<p>Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string <code>\"\"</code>.</p> <p>Example <pre><code>Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n</code></pre></p> <p>Solution <pre><code>class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -&gt; str:\n        if not strs:\n            return \"\"\n\n        # check each character of the first word\n        # against other words\n        for char in range(len(strs[0])):\n            for arr in range(1, len(strs)):\n                # if current character index is the same as the length\n                # of any of the other words, return\n                # if first word character is different from any\n                # of the other words' of the same index, return\n                if char == len(strs[arr]) or strs[0][char] != strs[arr][char]:\n                    return strs[0][:char]\n\n        # return the whole first word if not interrupted above\n        return strs[0]\n</code></pre></p>"},{"location":"notes/commands/","title":"Commands","text":""},{"location":"notes/commands/#git","title":"Git","text":""},{"location":"notes/commands/#config","title":"Config","text":"<pre><code># set identity\ngit config -global user.name \"Your Name\"\ngit config -global user.email \"youremail@domain.com\"\n</code></pre>"},{"location":"notes/commands/#initialize","title":"Initialize","text":"<pre><code># initialize directory as git project\ngit init\n\n# repository is aliased by origin\ngit clone &lt;repository&gt; &lt;local-directory&gt;\n</code></pre>"},{"location":"notes/commands/#update","title":"Update","text":"<pre><code># downloads commits, files, refs from remote to local\n# safer update, fetched content has to be explicitly checked out\ngit fetch\n\n# fetch and update local content\ngit pull &lt;repository&gt; &lt;branch&gt;\n\n# merge giver to receiver, must be at receiver branch\ngit merge &lt;giver-branch&gt;\n</code></pre>"},{"location":"notes/commands/#workflow","title":"Workflow","text":"<pre><code># show status\ngit status\ngit diff &lt;. | file&gt;\n\n# add files to staging\ngit add &lt;. | files&gt;\n\n# commit staged files\n# must be in quotation marks\n# written in present tense\n# should be brief, 50 characters or fewer\ngit commit -m &lt;comment&gt;\n\n# push committed files\ngit push origin &lt;branch&gt;\n</code></pre>"},{"location":"notes/commands/#show","title":"Show","text":"<pre><code># show commits\ngit log\n\n# HEAD commit contains the latest commits\ngit show HEAD\n\n# show repositories\ngit remote -v\n</code></pre>"},{"location":"notes/commands/#branch","title":"Branch","text":"<pre><code># show current branch\ngit branch\n\n# switch branch\ngit checkout &lt;branch&gt;\n\n# delete branch\ngit branch -d &lt;branch&gt;\n\n# rename local branch\ngit branch -m new-branch-name\n</code></pre>"},{"location":"notes/commands/#reset","title":"Reset","text":"<pre><code># revert file in working directory to its latest commit\ngit checkout &lt;commit&gt; &lt;file&gt;\n\n# unstage a file\ngit reset &lt;commit&gt; &lt;file&gt;\n\n# undo to the commit identified by sha\ngit reset &lt;sha&gt;\n</code></pre>"},{"location":"notes/commands/#kafka","title":"Kafka","text":""},{"location":"notes/commands/#consume","title":"Consume","text":"<pre><code>kafka-console-consumer --topic invoice_sync --from-beginning --bootstrap-server localhost:9092\n\nkafka-consumer-groups --bootstrap-server localhost:9092 --group payment_update_group --reset-offsets --shift-by 1 --topic payment_update --execute\n</code></pre>"},{"location":"notes/commands/#produce","title":"Produce","text":"<pre><code>kafka-console-producer --topic payment_update --bootstrap-server localhost:9092\n</code></pre>"},{"location":"notes/commands/#python","title":"Python","text":""},{"location":"notes/commands/#run-uvicorn","title":"Run Uvicorn","text":"<pre><code>poetry run uvicorn main:app --reload --port 5001\n</code></pre>"},{"location":"notes/commands/#shell","title":"Shell","text":""},{"location":"notes/commands/#add-multiple-ssh-keys","title":"Add multiple SSH keys","text":"<pre><code>eval \"$(ssh-agent -s)\"\nssh-add -K ~/.ssh/id_rsa\n</code></pre>"},{"location":"notes/commands/#export-env-manually","title":"Export <code>.env</code> manually","text":"<pre><code>export $(grep -v '^#' .env | xargs)\nunset $(grep -v '^#' .env | sed -E 's/(.)=./\\1/' | xargs)\n</code></pre>"},{"location":"notes/commands/#tunnel-from-server","title":"Tunnel from server","text":"<pre><code># accessible at: localhost:4000, localhost:4001, localhost:4002\nssh -NL 4000:localhost:4000 -NL 4001:localhost:4001 -NL 4002:localhost:4002 uat@server\n\n# tunnel an external resource from a server\nssh -NL 5433:x.rds.amazonaws.com:5432 uat@server\n</code></pre>"},{"location":"notes/commands/#slack","title":"Slack","text":""},{"location":"notes/commands/#github","title":"GitHub","text":"<pre><code>/github subscribe UploanPH/athena-company pulls reviews comments\n/github unsubscribe UploanPH/athena-company issues commits releases deployments\n</code></pre>"},{"location":"notes/container/","title":"Container","text":""},{"location":"notes/container/#docker","title":"Docker","text":"<p>Setup Best Practices </p> <p>Dockerfile with Poetry  - no need for a requirements file - the virtualenv is managed by Poetry - no Poetry in the final image - application and venv contained in one folder - Python application cannot write to its files or the virtualenv</p> <p>Dockerfile Templates </p> <p>Commands <pre><code>docker build . -t tag:latest\n\ndocker images\ndocker run -it image_id\n\n# overrides CMD\ndocker run image_id uvicorn config.asgi\n# overrides ENTRYPOINT\ndocker run -entrypoint uvicorn config.asgi image_id\n\n# run a terminal inside container\ndocker run -it -entrypoint /bin/sh image_id\n\ndocker ps\ndocker ps -a\n\ndocker stop container_id\ndocker kill container_id\n\ndocker rm container_id\ndocker rmi image_id\n\n# clean resources\ndocker image prune\ndocker rm $(docker ps -a -f status=exited -q)\ndocker volume prune\n\n# dangling only\ndocker system prune\n# includes unused\ndocker system prune -a\n</code></pre></p>"},{"location":"notes/container/#kubectl","title":"Kubectl","text":""},{"location":"notes/container/#logs","title":"Logs","text":"<pre><code>k logs -f deploy/&lt;deploy&gt;\nk logs -fl app=&lt;label&gt;\n</code></pre>"},{"location":"notes/container/#logs-of-previous-deploy","title":"Logs of previous deploy","text":"<pre><code>kubectl logs podname -c containername --previous\n\nk logs deploy/&lt;deploy&gt; --previous\n</code></pre>"},{"location":"notes/container/#execute-into-a-pod","title":"Execute into a pod","text":"<pre><code>k get pods\nk exec -ti &lt;pod&gt; -- sh\n</code></pre>"},{"location":"notes/container/#run-cronjob-as-job","title":"Run cronjob as job","text":"<pre><code>k create job --from=cj/&lt;cronjob&gt; &lt;name&gt;\n</code></pre>"},{"location":"notes/container/#get-pods-and-sort-by-memory","title":"Get pods and sort by memory","text":"<pre><code>k top pod --sort-by=memory\n</code></pre>"},{"location":"notes/css/","title":"CSS","text":""},{"location":"notes/css/#format","title":"Format","text":"<pre><code>selector {\n    property: value;\n}\n</code></pre>"},{"location":"notes/css/#location","title":"Location","text":""},{"location":"notes/css/#inline-styles-avoid","title":"Inline Styles (avoid)","text":"<pre><code>&lt;button style=\"background-color: blue\"&gt;...&lt;/button&gt;\n</code></pre>"},{"location":"notes/css/#internal-stylesheet","title":"Internal Stylesheet","text":"<pre><code>&lt;style&gt; element\n&lt;head&gt;\n    &lt;style&gt;\n        h2 {\n            color: blue;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"notes/css/#external-stylesheet","title":"External Stylesheet","text":"<pre><code>&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"main.css\"&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"notes/css/#selectors","title":"Selectors","text":"<pre><code>/* universal */\n* { }\n\n/* element */\nh2 { }\n\n/* id */\n#id { }\n\n/* class */\n.class { }\n\n/* descendant */\nul li { }\n\n/* adjacent */\n/* paragraph that comes immediately after an image */\nimg + p { }\n\n/* child */\ndiv &gt; span { }\n\n/* attribute */\n/* a with a title attribute */\na[title] { }\n\n/* links exactly matching with https://example.org */\na[href=\"https://example.org\"] { }\n\n/* links ending in .org */\na[href$=\".org\"] { }\n</code></pre>"},{"location":"notes/css/#pseudo-classes","title":"Pseudo-Classes","text":"<pre><code>/* element:class */\na:hover { }\n</code></pre>"},{"location":"notes/css/#pseudo-elements","title":"Pseudo-Elements","text":"<pre><code>/* element::sub-element */\nspan::before { }\n</code></pre>"},{"location":"notes/css/#specificity","title":"Specificity","text":"<ol> <li><code>!important</code> (avoid)</li> <li>Inline Styles (avoid)</li> <li>ID</li> <li>Class</li> <li>Element</li> </ol>"},{"location":"notes/css/#relative-units","title":"Relative Units","text":"<ol> <li><code>%</code> - relative to some value</li> <li><code>em</code> - relative to parent or contained font size; can grow or srhink if nested</li> <li><code>rem</code> - relative to root; solves <code>em</code> nested issue</li> </ol>"},{"location":"notes/css/#properties","title":"Properties","text":""},{"location":"notes/css/#box-model","title":"Box Model","text":"<pre><code>/* dimension */\nwidth: width;\nheight: height;\n\n/* border */\nborder: width style color;\n\n/* padding */\npadding: top right bottom left;\n\n/* margin */\nmargin: top right bottom left;\n</code></pre>"},{"location":"notes/css/#display","title":"Display","text":"<pre><code>img {\n    display: display;\n}\n</code></pre> <ol> <li><code>inline</code></li> <li><code>block</code></li> <li><code>inline-block</code> - respects vertical, horizontal, width, height unlike inline</li> <li><code>flex</code> - automatically arranges elements depending on the screen size</li> </ol>"},{"location":"notes/css/#transparency","title":"Transparency","text":"<pre><code>/* alpha */\nh2 {\n    color: rgba(255, 255, 255, 0.7);\n}\n\n/* opacity */\nimg {\n    opacity: 0.7;\n}\n</code></pre>"},{"location":"notes/css/#position","title":"Position","text":"<pre><code>img {\n    position: position;\n}\n</code></pre> <ol> <li><code>static</code> - default</li> <li><code>relative</code> - offset from current position</li> <li><code>absolute</code> - no space alloted; relative to parent or container</li> <li><code>fixed</code> - absolute but fixed in the view</li> <li><code>sticky</code> - not initially fixed but gets fixed when moved</li> </ol>"},{"location":"notes/css/#transition","title":"Transition","text":"<pre><code>transition: property duration function delay, other-properties;\n</code></pre>"},{"location":"notes/css/#transform","title":"Transform","text":"<p>Includes child in the transformation <pre><code>transform: function other-functions;\n</code></pre></p> <ol> <li><code>rotate</code></li> <li><code>scale</code></li> <li><code>translate</code></li> <li><code>skew</code></li> </ol>"},{"location":"notes/css/#background","title":"Background","text":"<pre><code>background: repeat position/size url, other-backgrounds;\nbackground: no-repeat center/80% url(\"../img/image.png\");\n</code></pre>"},{"location":"notes/css/#flex-model","title":"Flex Model","text":"<ol> <li>Main Axis - x-axis by default</li> <li>Cross Axis - y-axis by default</li> </ol>"},{"location":"notes/css/#properties_1","title":"Properties","text":"<ol> <li><code>flow-direction</code> - main axis direction</li> <li><code>justify-content</code> - alignment on main axis</li> <li><code>flex-wrap</code> - wrapping on cross axis</li> <li><code>align-items</code> - alignment on cross axis</li> <li><code>align-content</code> - space between elements on cross axis; must have flex-wrap</li> <li><code>align-self</code> - alignment of the element itself on cross axis; applied on the element, not the container</li> </ol>"},{"location":"notes/css/#size","title":"Size","text":"<p>Applied on elements <pre><code>flex: grow shrink basis;\n</code></pre></p> <ol> <li><code>flex-basis</code> - size on main axis</li> <li><code>flex-grow</code> - takes available space; proportion</li> <li><code>flex-shrink</code> - how much element shrinks with limited space; proportion</li> </ol>"},{"location":"notes/css/#demo","title":"Demo","text":"<p>Minimal Visual Cheat Sheet Interactive Cheat Sheet</p>"},{"location":"notes/css/#media-query","title":"Media Query","text":"<pre><code>@media (min-width: 300px) and (max-width: 700px) {\n    styles\n}\n\n/* example */\nh1 {\n    color: black;\n}\n@media (min-width: 300px) {\n    h1 {\n        color: blue;\n    }\n}\n@media (min-width: 700px) {\n    h1 {\n        color: cyan;\n    }\n}\n</code></pre>"},{"location":"notes/css/#notes","title":"Notes","text":""},{"location":"notes/css/#use-mdn-css-cookbook","title":"Use MDN CSS Cookbook","text":"<p>Cookbook</p>"},{"location":"notes/css/#use-a-css-reset-template","title":"Use a CSS reset template","text":"<p>Mini Reset</p>"},{"location":"notes/css/#use-bootstrap-for-easy-css-framework","title":"Use Bootstrap for easy CSS framework","text":""},{"location":"notes/css/#use-bootstrap-guidelines-for-breakpoints","title":"Use Bootstrap guidelines for breakpoints","text":""},{"location":"notes/css/#footer-at-the-bottom-of-the-page","title":"Footer at the bottom of the page","text":"<ol> <li>Set container to flex column with <code>100vh</code></li> <li>Set footer margin to auto</li> </ol>"},{"location":"notes/css/#cookbook","title":"Cookbook","text":""},{"location":"notes/css/#divider-before-every-element","title":"Divider before every element","text":"<pre><code>.post h2:before {\n    content: '';\n    background: no-repeat left/contain url(/public/divider.svg);\n    display: block;\n    margin: 2rem auto;\n    height: 1rem;\n    filter: invert(63%) sepia(50%) saturate(6257%) hue-rotate(181deg) brightness(89%) contrast(83%);\n}\n</code></pre>"},{"location":"notes/html/","title":"HTML","text":""},{"location":"notes/html/#boilerplate","title":"Boilerplate","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    ...\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Emmet: <code>![tab]</code></p>"},{"location":"notes/html/#elements","title":"Elements","text":""},{"location":"notes/html/#common-tags","title":"Common Tags","text":"<p>Comment <pre><code>&lt;!-- comment --&gt;\n</code></pre></p> <p>Anchor <pre><code>&lt;a href=\"dest\"&gt;&lt;/a&gt;\n</code></pre></p> <p>Image <pre><code>&lt;img src=\"src\" alt=\"description\"&gt;\n</code></pre></p> <p>Block <pre><code>&lt;div&gt;...&lt;/div&gt;\n</code></pre></p> <p>Inline <pre><code>&lt;span class=\"class\"&gt;...&lt;/span&gt;\n</code></pre></p> <p>Superscript and Subscript <pre><code>&lt;sup&gt;...&lt;/sup&gt;\n&lt;sub&gt;...&lt;/sub&gt;\n</code></pre></p> <p>Entities <pre><code>&lt;!-- $code; --&gt;\n&lt;!-- ampersand --&gt;\n&amp;amp;\n</code></pre></p>"},{"location":"notes/html/#semantic-markup","title":"Semantic Markup","text":"<pre><code>&lt;main&gt;...&lt;/main&gt;\n&lt;nav&gt;...&lt;/nav&gt;\n\n&lt;section&gt;...&lt;/section&gt;\n&lt;article&gt;...&lt;/article&gt;\n\n&lt;aside&gt;...&lt;/aside&gt;\n&lt;header...&gt;&lt;/header&gt;\n&lt;footer...&gt;&lt;/footer&gt;\n\n&lt;time&gt;...&lt;/time&gt;\n&lt;figure&gt;...&lt;/figure&gt;\n</code></pre>"},{"location":"notes/html/#lists","title":"Lists","text":"<pre><code>&lt;ol&gt;\n  &lt;li&gt;\n    &lt;ul&gt;\n      &lt;li&gt;...&lt;/li&gt;\n      &lt;li&gt;...&lt;/li&gt;\n      &lt;li&gt;...&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;...&lt;/li&gt;\n  &lt;li&gt;...&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"notes/html/#tables","title":"Tables","text":"<pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th rowspan=\"span\"&gt;header1&lt;/th&gt;\n      &lt;th colspan=\"span\"&gt;header2&lt;/th&gt;\n      &lt;th&gt;header3&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;data1&lt;/td&gt;\n      &lt;td&gt;data2&lt;/td&gt;\n      &lt;td&gt;data3&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;data1&lt;/td&gt;\n      &lt;td&gt;data2&lt;/td&gt;\n      &lt;td&gt;data3&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;\n      &lt;td&gt;footer1&lt;/td&gt;\n      &lt;td&gt;footer2&lt;/td&gt;\n      &lt;td&gt;footer3&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"notes/html/#forms","title":"Forms","text":"<p><pre><code>&lt;form action=\"dest\" method=\"method\"&gt;\n  &lt;p&gt;\n    &lt;label for=\"id\"&gt;...&lt;/label&gt;\n    &lt;input type=\"type\" placeholder=\"text\" id=\"id\" name=\"param_label\"&gt;\n  &lt;/p&gt;\n  &lt;!-- or --&gt;\n  &lt;p&gt;\n    &lt;label&gt;...\n      &lt;input type=\"type\" placeholder=\"text\" name=\"param_label\"&gt;\n    &lt;/label&gt;\n  &lt;/p&gt;\n\n  &lt;button type=\"submit\"&gt;...&lt;/button&gt;\n  &lt;!-- or --&gt;\n  &lt;input type=\"submit\" value=\"value\"&gt;\n&lt;/form&gt;\n</code></pre> Forms support built-in and basic validations <pre><code>&lt;input type=\"text\" required&gt;\n</code></pre></p>"},{"location":"notes/html/#notes","title":"Notes","text":""},{"location":"notes/html/#enable-auto-format-upon-save","title":"Enable auto-format upon save","text":""},{"location":"notes/html/#use-emmet-shortcuts","title":"Use Emmet shortcuts","text":"<p>Type CSS-like expressions that are automatically expanded to HTML syntax</p> <p>Cheat Sheet</p>"},{"location":"notes/html/#submit-form-as-object-or-array","title":"Submit form as object or array","text":"<pre><code>// when received by backend: { entity: {key: value} }\n&lt;input name=\"entity[key]\"&gt;\n\n// when received by backend: { entity: [...] }\n&lt;input name=\"entity[]\"&gt;\n</code></pre>"},{"location":"notes/java/","title":"Java","text":""},{"location":"notes/java/#maven","title":"Maven","text":""},{"location":"notes/java/#version-bump","title":"Version bump","text":"<pre><code>./mvnw versions:set -DnewVersion=1.17.0-SNAPSHOT\n</code></pre>"},{"location":"notes/javascript/","title":"Javascript","text":""},{"location":"notes/javascript/#variables","title":"Variables","text":"<pre><code>// comment\n\nlet variable = value;\nconst constant = value;\n\n// old and not used anymore\nvar variable = value;\n</code></pre>"},{"location":"notes/javascript/#primitive-types","title":"Primitive Types","text":"<ol> <li>Number - includes <code>NaN</code></li> <li>String - zeroth index<ul> <li><code>[]</code> to access index</li> <li><code>+</code> for concatenation</li> </ul> </li> <li>Boolean - <code>true</code> or <code>false</code></li> <li><code>null</code> - use intentionally</li> <li><code>undefined</code> - \"I don't know the data.\"</li> </ol>"},{"location":"notes/javascript/#operators","title":"Operators","text":""},{"location":"notes/javascript/#math","title":"Math","text":"<pre><code>+           addition\n-           subtraction\n/           division\n*           multiplication\n%           modulo\n**          exponentiation\n++          increment\n-          decrement\n</code></pre>"},{"location":"notes/javascript/#comparison","title":"Comparison","text":"<pre><code>&gt;\n&lt;\n\n&gt;=\n&lt;=\n\n== // doesn't care about types\n!=\n\n=== // strict; cares about types\n!==\n</code></pre>"},{"location":"notes/javascript/#spread","title":"Spread","text":""},{"location":"notes/javascript/#as-spread","title":"As spread","text":"<p>Spreads an iterable as individual items:</p> <ul> <li>array to a function args</li> <li>array to a new array</li> <li>array to an object; index is used as key and item as value</li> </ul> <p>Spreads an object as individual keys and values:</p> <ul> <li>object to a new object</li> <li>order matters for several spreads, latter wins for conflicting keys</li> </ul>"},{"location":"notes/javascript/#as-rest","title":"As rest","text":"<p>Collects other arguments passed to a function <pre><code>function func(argN, ...args) {\n    console.log(args);\n    ...\n}\n</code></pre></p>"},{"location":"notes/javascript/#string-template-literals","title":"String Template Literals","text":"<pre><code>`hi ${variable}`\n</code></pre>"},{"location":"notes/javascript/#common-methods","title":"Common Methods","text":"<pre><code>// browser\nconsole.log(...)\nconsole.warn(...)\nconsole.alert(...)\nalert(...)\nprompt()\nparseInt(...)\n\n// async timeout\nsetTimeout(callback, milliseconds)\n\n// repeat callback for every interval\nconst id = setInterval(callback, milliseconds) \n// stops interval callback\nclearInterval(id)\n</code></pre>"},{"location":"notes/javascript/#html-script","title":"HTML Script","text":"<pre><code>&lt;body&gt;\n    ...\n    &lt;script src='script.js'&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;!- or -&gt;\n\n&lt;head&gt;\n    &lt;script&gt;...&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"notes/javascript/#data-structure","title":"Data Structure","text":""},{"location":"notes/javascript/#arrays","title":"Arrays","text":"<pre><code>let array = [value1, valueN];\narray[0]\n</code></pre> <p>Methods Array methods can be chained.</p> <pre><code>// applies callback to each element\n// no returns\n// ex: build on top of an existing variable, e.g. total, list\narray.forEach(callback)\n\n// similar to forEach but returns a new array\nconst newArray = array.map(callback)\n\n// returns a new array that 'passes' the callback\n// callback must return a boolean\nconst newArray = array.filter(callback)\n\n// test; returns true if ALL items `pass` the callback\n// callback must return a boolean\nconst bool = array.every(callback) \n\n// test; returns true if ANY of the items passes the callback\n// callback must return a boolean\nconst bool = array.some(callback) \n\n// reduces an array to a single value by succeedingly pairing adjacent items and performing the callback's expression\n// callback returns a new value for the accumulator\nconst val = array.reduce((accumulator, current) =&gt; expression, initialValue) \n</code></pre>"},{"location":"notes/javascript/#objects","title":"Objects","text":"<p>All keys are automatically converted to strings.</p> <pre><code>let objectLiteral = {\n    key: value,\n    keyN: valueN,\n};\n\nobjectLiteral['key'] // allows expression inside the brackets\nobjectLiteral.key\n</code></pre>"},{"location":"notes/javascript/#object-with-properties-and-methods","title":"Object with properties and methods","text":"<pre><code>const variable = {\n    property1: value1,\n    method1: function () {\n        ...\n    },\n    ...\n}\n\n// or\n\nconst variable = {\n    property1: value1:\n    method1 () {\n        ...\n    },\n    ...\n}\n</code></pre> <p><code>this</code> refers to the object that invoked the method, not necessarily the object where the method was initialized to.</p> <pre><code>const test = {\n    PI: 3.14,\n    print() { console.log(this.PI) };\n}\n\nconst other = test.print;\n// `this` here will refer to `window` and not to `test`\n// thus test.PI will not be displayed\n// other() is similar to window.other()\nother()\n</code></pre>"},{"location":"notes/javascript/#control-flow","title":"Control Flow","text":""},{"location":"notes/javascript/#if","title":"If","text":"<pre><code>if (condition) {\n    ...\n} else if (condition) {\n    ...\n} else {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#switch-case","title":"Switch Case","text":"<pre><code>switch (value) {\n    case valueN:\n        ...\n        break;\n    default:\n        ...\n}\n</code></pre>"},{"location":"notes/javascript/#logical-operators","title":"Logical Operators","text":"<pre><code>&amp;&amp; // and\n|| // or\n! // not\n</code></pre>"},{"location":"notes/javascript/#falsy-values","title":"Falsy Values","text":"<pre><code>false\n0\n''\nnull\nundefined\nNaN\n</code></pre>"},{"location":"notes/javascript/#loops","title":"Loops","text":""},{"location":"notes/javascript/#for","title":"for","text":"<pre><code>for (start; end; step) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#forof-iterable","title":"for...of (iterable)","text":"<pre><code>for (let item of iterables) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#forin-object","title":"for...in (object)","text":"<pre><code>for (let key in object) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#while","title":"while","text":"<pre><code>while (condition) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#dowhile","title":"do...while","text":"<pre><code>do {\n    ...\n} while(condition);\n</code></pre>"},{"location":"notes/javascript/#label","title":"Label","text":"<p>Identifier that lets you refer to it elsewhere in your program. <pre><code>label:\n...\n</code></pre></p>"},{"location":"notes/javascript/#break","title":"Break","text":"<p>Terminates a loop <pre><code>break;\nbreak label;\n</code></pre></p>"},{"location":"notes/javascript/#continue","title":"Continue","text":"<p>Skips or restarts an iteration <pre><code>continue;\ncontinue label;\n</code></pre></p>"},{"location":"notes/javascript/#function","title":"Function","text":""},{"location":"notes/javascript/#format","title":"Format","text":"<pre><code>function label(argN, kwargN = defN) {\n    ...\n    return value;\n}\n</code></pre>"},{"location":"notes/javascript/#scopes","title":"Scopes","text":"<ol> <li>Function Scope - prioritizes initialized variable inside the function.</li> <li>Block Scope - scope within blocks of code (e.g. conditionals, loops. <code>var</code> bypasses this as it forces function scope)</li> <li>Lexical Scope - inner functions have access to variables in parent functions.</li> </ol>"},{"location":"notes/javascript/#function-expression","title":"Function Expression","text":"<pre><code>const variable = function (argN) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#arrow-function","title":"Arrow Function","text":"<p>Similar to function expressions Compact function definition</p> <pre><code>const func = (argN) =&gt; {\n    ...\n};\n</code></pre> <p><code>this</code> refers to where it was executed, instead of what invoked it. Use regular function and arrow function appropriately. See this Context</p>"},{"location":"notes/javascript/#implict-return","title":"Implict Return","text":"<pre><code>const func = (argN) =&gt; (\n    value/expression;\n)\n\n// or\n\nconst func = (argN) =&gt; value/expression\n</code></pre>"},{"location":"notes/javascript/#higher-order-functions","title":"Higher Order Functions","text":"<p>Functions that can accept and/or return functions</p>"},{"location":"notes/javascript/#error-handling","title":"Error Handling","text":"<pre><code>try {\n    ...\n} catch (e) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#destructuring","title":"Destructuring","text":"<pre><code>// arrays\nconst [var1, var2, ...varN] = array; // ... in varN is a rest operator\n\n// objects\nconst { key1, key2, key3: newKey3 = defaultVal } = object;\n\n// argumets\n// only the specified keys from an object argument will be accepted as input to the function\nfunction func({ key1, key2, key3 = defaultVal3 }) {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#dom","title":"DOM","text":"<p>Document Object Model JS representation of a webpage</p>"},{"location":"notes/javascript/#methods","title":"Methods","text":"<pre><code>document.getElementById(id)\ndocument.getElementsByTagName('tag')\ndocument.getElementsByClassName('class')\n\ndocument.querySelector('#id')\ndocument.querySelector('tag')\ndocument.querySelector('.class')\ndocument.querySelector('tag[attribute=value]')\n\ndocument.querySelectorAll(query)\n</code></pre>"},{"location":"notes/javascript/#element-properties-and-methods","title":"Element Properties and Methods","text":"<pre><code>const element = document.querySelector(query)\n</code></pre>"},{"location":"notes/javascript/#properties","title":"Properties","text":"<pre><code>// content\nelement.innerText\nelement.textContent\nelement.innerHTML\n\n// attributes\nelement.getAttribute('attribute')\nelement.setAttribute('attribute', 'value')\n\n// styles\nelement.style\nelement.style.attribute = 'value'; // avoid because inline; use css class methods instead\n\n// css classes\nelement.classList.add(class)\nelement.classList.remove(class)\nelement.classList.toggle(class)\n\n// get all effective css classes\nwindow.getComputedStyle(element)\n\n// selecting a relative element\nelement.parentElement\nelement.children\nelement.nextElementSibling\nelement.previousElementSibling\n</code></pre>"},{"location":"notes/javascript/#create-and-remove-elements","title":"Create and remove elements","text":"<pre><code>// create a new element\nconst elem = document.createElement(tag)\n\n// add as child\nelement.appendChild(elem) \nelement.append(elem, ...) // newer; append text easily; append multiple elements\nelement.prepend(elem, ...) \n\n// add as sibling\nelement.insertAdjacentElement(position, elem)\nelement.after(elem)\nelement.before(elem)\n\n// remove element\nconst elem = document.querySelector(query)\nelem.parentElement.removeChild(elem) // older\nelem.remove() // newer\n</code></pre>"},{"location":"notes/javascript/#event-handler","title":"Event Handler","text":""},{"location":"notes/javascript/#inline-avoid","title":"Inline (avoid)","text":"<pre><code>&lt;button onclick=\"alert('hi')\"&gt;Click&lt;/button&gt;\n</code></pre>"},{"location":"notes/javascript/#property","title":"Property","text":"<p>Only supports one callback for each property.</p> <pre><code>elem = document.querySelector(query);\nelem.onclick = function () {\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#event-listener","title":"Event Listener","text":"<p>Supports multiple callbacks More arguments/options</p> <p><code>this</code> inside the callback refers to the element. Use <code>this</code> when defining a separate callback function.</p> <pre><code>elem = document.querySelector(query);\nelem.addEventListener(event, callback);\n\n// e callback argument\nelem.addEventListener(event, function(e) {\n    // e will contain an event object with details about the event\n    // e.g. coordinates, keys\n    ...\n})\n</code></pre> <p>Prevent Default Prevents default behavior of the element (e.g. stop redirection upon submitting forms) <pre><code>elem.addEventListener(event, function(e) {\n    e.preventDefault()\n})\n</code></pre></p> <p>Event Bubbling When nested event handlers bubble up executing each in order <pre><code>elem.addEventListener(event, function(e) {\n    // stops event bubbling\n    e.stopPropagation()\n})\n</code></pre></p> <p>Event Delegation Strategically applying event handlers so they work correctly.</p> <p>Example:</p> <ul> <li>handler that removes an element also removes the handler itself</li> <li>when new elements are created, they won't have the same handler</li> </ul> <p>Solution: apply event handler on the parent that will persist</p> <pre><code>parentElem.addEventListener('click', (e) =&gt; {\n    e.target.nodeName === 'LI' &amp;&amp; e.target.remove()\n})\n</code></pre>"},{"location":"notes/javascript/#promise","title":"Promise","text":"<p>Object representation of the eventual completion or failure of an asynchronous operation. Solves callback hell by chaining promises</p> <pre><code>promise1\n    .then(data =&gt; {\n        ...\n        return promise2\n    })\n    .then(data =&gt; {\n        ...\n        return promise3\n    })\n    .then(data =&gt; {\n        ...\n    })\n    .catch(err =&gt; {\n        ...\n    })\n</code></pre>"},{"location":"notes/javascript/#create-a-promise","title":"Create a promise","text":"<pre><code>const request = (url) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        ...\n        if (success) {\n            ...\n            resolve(data)\n        } else {\n            ...\n            reject(err)\n        }\n    })\n}\n</code></pre>"},{"location":"notes/javascript/#async-functions","title":"Async Functions","text":"<p>Syntactic sugar for promises Use async and await to bundle promises instead of chaining them</p> <p><code>async</code> - creates an async function <code>await</code> - pauses execution until a promise is resolved or rejected</p> <pre><code>const func = async (url) =&gt; {\n    try {\n        let data = await fetch(url)\n        ...\n        return data\n    } catch (e) {\n        throw new Error(`error: ${e}`) // or throw `error: ${e}`\n    }\n}\n</code></pre>"},{"location":"notes/javascript/#http","title":"HTTP","text":""},{"location":"notes/javascript/#ajax","title":"AJAX","text":"<p>Asynchronous Javascript and XML (JSON) Making requests behind the scenes without going to a new webpage (e.g. infinite scrolling, live search)</p>"},{"location":"notes/javascript/#json","title":"JSON","text":"<p>JavaScript Object Notation <pre><code>// from json string to object\nJSON.parse(json)\n\n// from json object to string\nJSON.stringify(object)\n</code></pre></p>"},{"location":"notes/javascript/#response","title":"Response","text":"<ul> <li>content</li> <li>status code</li> <li>headers (metadata)</li> </ul>"},{"location":"notes/javascript/#query-string","title":"Query String","text":"<p>Additional info for the request</p>"},{"location":"notes/javascript/#requests","title":"Requests","text":""},{"location":"notes/javascript/#xhr-old","title":"XHR (old)","text":"<p>XML Http Request Old way of making requests Does not support promises <pre><code>const req = new XMLHttpRequest();\n\nreq.onload = function () {\n    ...\n    const data = JSON.parse(this.responseText);\n    ...\n}\n\nreq.onerror = function () {\n    ...\n}\n\nreq.open(method, url);\nreq.send();\n</code></pre></p>"},{"location":"notes/javascript/#fetch-api-built-in","title":"Fetch API (built-in)","text":"<p>Better way of making requests than XHR Support promises</p> <pre><code>fetch(url)\n    .then(res =&gt; {\n        ...\n        // parse the JSON string\n        return res.json()\n    })\n    .then(data =&gt; {\n        // here data has been parsed to JSON\n        ...\n    })\n    .catch(e =&gt; {\n        ...\n    })\n\n// using async\nconst fetchAsync = async () =&gt; {\n    try {\n        const res = await fetch(url);\n        const data = await res.json();\n        ...\n    } catch (e) {\n        ...\n    }\n}\n</code></pre>"},{"location":"notes/javascript/#axios","title":"Axios","text":"<p>Library for making HTTP requests Better than fetch Data is already parsed</p> <pre><code>axios.get(url)\n    .then(res =&gt; {\n        // already parsed\n        const data = res.data;\n    })\n    .catch(e =&gt; {\n        ...\n    })\n\n// using async\nconst axiosAsnyc = async () =&gt; {\n    try {\n        const config = { \n            headers: { ... },\n            params: { ... }\n        };\n        const res = await axios.get(url, config);\n        const data = res.data;\n    } catch (e) {\n        ...\n    }\n}\n</code></pre>"},{"location":"notes/javascript/#class","title":"Class","text":""},{"location":"notes/javascript/#factory-function-old","title":"Factory Function (old)","text":"<p>A function that returns an object attached with its properties and methods. Each method is defined in each returned object unlike with prototypes (bad practice).</p> <pre><code>function func(args, ...) {\n    const obj = {};\n    obj.arg1 = arg1;\n    ...\n\n    obj.method1 = function() {\n        const { properties, ... } = this;\n        ...\n    }\n    ...\n\n    return obj;\n}\n\ninstance = obj(args);\n</code></pre>"},{"location":"notes/javascript/#constructor-function-old","title":"Constructor Function (old)","text":"<p>A function that creates a new object with properties and methods using prototypes. Uses <code>new</code> keyword. Methods are attached by using prototypes. <pre><code>Object.prototype.method = function () { ... }\n</code></pre></p> <pre><code>function Func(args) {\n    this.arg1 = arg1;\n    ...\n}\n\nFunc.prototype.method1 = function() {\n    const { prop1, prop2, ... } = this;\n    ...\n}\n\ninstance = new Func(args);\n</code></pre>"},{"location":"notes/javascript/#classes-classes","title":"Classes {#classes}","text":"<p>Syntactic sugar for constructor functions</p> <pre><code>class Class {\n    constructor(args) {\n        this.arg1 = arg1;\n        ...\n    }\n\n    method1() {\n        const { properties, ... } = this;\n        ...\n    }\n}\n\ninstance = new Class(args);\n\n// inheritance\nclass SubClass extends Class {\n    constructor(args) {\n        super(args);\n        this.arg1 = arg1;\n        ...\n    }\n\n    ...\n}\n</code></pre>"},{"location":"notes/javascript/#notes","title":"Notes","text":""},{"location":"notes/javascript/#camelcase-naming-convention","title":"CamelCase Naming Convention","text":""},{"location":"notes/javascript/#window-is-the-top-level-or-global-object","title":"<code>window</code> is the top level or global object","text":""},{"location":"notes/javascript/#call-stack","title":"Call Stack","text":"<p>How code is tracked and executed LIFO - recent function put into the call stack is executed and removed from the stack Loupe - visualize call stack</p>"},{"location":"notes/javascript/#js-is-single-threaded","title":"JS is single-threaded","text":"<p>At any given point in time, the thread is running at most a single line of JS code. Browsers help JS to work around single threadedness via web apis. It will remind JS to run a callback function at a certain point of time.</p>"},{"location":"notes/javascript/#callback-hell","title":"Callback Hell","text":"<p>Multiple nested callbacks When a callback depends on a callback which depends on a callback, and so on.</p>"},{"location":"notes/javascript/#js-is-a-prototype-based-language","title":"JS is a prototype-based language","text":"<p>Objects and data structures are created from prototypes/blueprints sharing properties and methods.</p> <pre><code>// type.prototype.property/method\nString.prototype.length\n</code></pre>"},{"location":"notes/javascript/#this-context","title":"<code>this</code> Context","text":""},{"location":"notes/javascript/#global-context","title":"Global Context","text":"<p>Refers to the global object whether in strict mode or not.</p> <pre><code>this.b = \"MDN\";\nconsole.log(window.b) // \"MDN\"\nconsole.log(b) // \"MDN\"\n</code></pre>"},{"location":"notes/javascript/#function-context","title":"Function Context","text":"<p>When not in strict mode, it will default to the global object.</p> <pre><code>function f1() {\n    return this;\n}\n\n// in a browser\nf1() === window; // true\n// in Node\nf1() === globalThis; // true\n</code></pre> <p>In strict mode, it's <code>undefined</code>.</p> <pre><code>function f2() {\n    'use strict';\n    return this;\n}\n\nf2() === undefined; // true\n</code></pre> <p>This can be overriden by <code>call</code> or <code>apply</code> methods.</p> <pre><code>// an object can be passed as the first argument to call or apply and this will be bound to it.\nvar obj = {a: 'Custom'};\n\nvar a = 'Global';\nfunction whatsThis() {\n    // The value of this is dependent on how the function is called\n    return this.a;\n}\n\nwhatsThis();          // 'Global' as `this` in the function isn't set, so it defaults to the global/window object\nwhatsThis.call(obj);  // 'Custom' as `this` in the function is set to obj\nwhatsThis.apply(obj); // 'Custom' as `this` in the function is set to obj\n</code></pre>"},{"location":"notes/javascript/#class-context","title":"Class Context","text":"<p>Similar to function except for few caveats. Within a class constructor, <code>this</code> is a regular object that can be accessed by the class methods. </p> <p>To retain the reference to the instance, it may be necessary to use <code>bind</code>. <pre><code>class Car {\n  constructor() {\n    // Bind sayBye but not sayHi to show the difference\n    this.sayBye = this.sayBye.bind(this);\n  }\n  sayHi() {\n    console.log(`Hello from ${this.name}`);\n  }\n  sayBye() {\n    console.log(`Bye from ${this.name}`);\n  }\n  get name() {\n    return 'Ferrari';\n  }\n}\n\nclass Bird extends Car {\n  get name() {\n    return 'Tweety';\n  }\n}\n\nconst car = new Car();\nconst bird = new Bird();\n\n// The value of 'this' in methods depends on their caller\ncar.sayHi(); // Hello from Ferrari\n\nbird.sayHi = car.sayHi;\nbird.sayHi(); // Hello from Tweety\n\n// For bound methods, 'this' doesn't depend on the caller\nbird.sayBye = car.sayBye;\nbird.sayBye();  // Bye from Ferrari\n</code></pre></p>"},{"location":"notes/javascript/#arrow-functions","title":"Arrow Functions","text":"<p><code>this</code> retains the value of the enclosing lexical context's <code>this</code> - where it was created. This is useful when retaining the reference to the object where it was created, instead of an instance where it was called. In global code, it will be set to the global object.</p>"},{"location":"notes/javascript/#as-an-object-method","title":"As an object method","text":"<p>When a function is called as a method of an object, its <code>this</code> is set to the object the method is called on.</p> <pre><code>// calling the method directly from the object\nvar o = {\n    prop: 37,\n    f: function() {\n        return this.prop;\n    }\n};\n\nconsole.log(o.f()); // 37\n\n// referencing `this` from the object the method was called on\nvar o = {prop: 37};\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\nconsole.log(o.f()); // 37\n</code></pre>"},{"location":"notes/javascript/#as-a-dom-event-handler","title":"As a DOM event handler","text":"<p><code>this</code> is set to the element on which the listener is placed.</p>"},{"location":"notes/mongodb/","title":"MongoDB","text":""},{"location":"notes/mongodb/#commands","title":"Commands","text":"<p>MongoDB Shell Also a JS shell - can execute JS code</p> <pre><code>help\n\ndb\nshow dbs\nshow collections\n\n// create/switch to specified db\nuse [db]\n\n// insert many documents\ndb.[collection].insert([{ ... }]) // array of js objects\n\n// returns all documents; returns a cursor\ndb.[collection].find()\n// specific query; returns a cursor\ndb.[collection].find({ ... })\n// specific query; returns 0 or 1 document\ndb.[collection].findOne({ ... })\n\n// updates 0 or 1 document\ndb.[collection].updateOne({ &lt;query&gt; }, { &lt;operator&gt; : { &lt;updates&gt; } })\n// updates many documents\ndb.[collection].updateMany({ &lt;query&gt; }, { &lt;operator&gt; : { &lt;updates&gt; } })\n// completely replace a document except the id\ndb.[collection].replaceOne({ &lt;query&gt; }, { &lt;operator&gt; : { &lt;updates&gt; } })\n\n// deletes 0 or 1 document\ndb.[collection].deleteOne({ &lt;query&gt; })\n// deletes many documents\ndb.[collection].deleteMany({ &lt;query&gt; })\n\n// sample query operators\n{'nested.properties': value}\n{age: {$gt: 7}}\n</code></pre>"},{"location":"notes/mongodb/#query","title":"Query","text":""},{"location":"notes/mongodb/#array-size","title":"Array size","text":"<pre><code>{\"$expr\": {\"$gt\": [{\"$size\": \"$product_details\"}, 1]}}\n</code></pre>"},{"location":"notes/mongodb/#type","title":"Type","text":"<pre><code>// string\n{\"created_at\": {\"$type\": \"string\"}}\n\n// not string\n{\"created_at\": {\"$not\": {\"$type\": \"string\"}}}\n\n// array elements are also array\n{\"active_product\": {\"$elemMatch\": {\"$type\": \"array\"}}}\n</code></pre>"},{"location":"notes/mongodb/#regex","title":"RegEx","text":"<pre><code>{\"email\": {\"$regex\": /@mailinator.com/i}}\n{\"email\": {\"$regex\": \"@mailinator.com\", \"$options\": \"i\"}}\n</code></pre>"},{"location":"notes/mongodb/#index","title":"Index","text":""},{"location":"notes/mongodb/#single","title":"Single","text":"<pre><code>db.prepayment.createIndex(\n    {\"transaction_id\": 1},\n    {\"name\": \"transaction_id_unique_1\", \"unique\": true}\n)\n\ndb.flows.createIndexes(\n    [{\"created_at\": 1}, {\"flow_id\": 1}, {\"recovery_type_code\": 1}]\n)\n</code></pre>"},{"location":"notes/mongodb/#compound","title":"Compound","text":"<pre><code>db.billing_lines.createIndex(\n    {\n        \"product_id\": 1,\n        \"current_cycle_payout_date\": 1,\n        \"line_type\": 1,\n        \"status\": 1\n    },\n    {\"name\": \"product_id_payroll_date_1\"}\n)\n</code></pre>"},{"location":"notes/mongodb/#update","title":"Update","text":""},{"location":"notes/mongodb/#many","title":"Many","text":"<pre><code>db.employees.updateMany(\n    {\n        \"employee_status\": \"GRANDFATHERED\",\n        \"previous_employee_status\": \"GRANDFATHERED\"\n    },\n    {\"$set\": {\"previous_employee_status\": \"ACTIVE\"}}\n)\n</code></pre>"},{"location":"notes/mongodb/#aggregate","title":"Aggregate","text":""},{"location":"notes/mongodb/#expression","title":"Expression","text":"<pre><code>db.employees.aggregate(\n    [\n        {\n            \"$match\": {\n                \"$expr\": {\n                    \"$eq\": [\n                        \"$employee_status\",\n                        \"$previous_employee_status\"\n                    ]\n                }\n            }\n        },\n        {\n            \"$project\": {\n                \"employee_id\": 1,\n                \"employee_status\": 1,\n                \"previous_employee_status\": 1\n            }\n        }\n    ]\n)\n</code></pre>"},{"location":"notes/mongodb/#count","title":"Count","text":"<pre><code>db.employees.aggregate(\n    [\n        {\n            \"$match\": {\n                \"employee_status\": \"GRANDFATHERED\",\n                \"previous_employee_status\": \"GRANDFATHERED\"\n            }\n        },\n        {\"$count\": \"count\"}\n    ]\n)\n</code></pre>"},{"location":"notes/mongodb/#group","title":"Group","text":"<pre><code>// group, count, sort count in descending, and show first (highest count)\ndb.lines.aggregate([\n    {\"$match\": {\"status\": {\"$ne\": \"CANCELLED\"}}},\n    {\"$group\": {\"_id\": {\"product_id\": \"$product_id\"}, \"count\": {\"$sum\": 1}}},\n    {\"$sort\": {\"count\": -1}},\n    {\"$limit\": 1}\n])\n\n// group, count, filter counts greater than 1, and count filtered\n// used for counting duplicates\ndb.disbursement_transactions.aggregate([\n    {\"$group\": {\"_id\": {\"disbursement_id\": \"$disbursement_id\"}, \"count\": {\"$sum\": 1}}},\n    {\"$match\": {\"count\" : {\"$gt\": 1}}},\n    {\"$count\": \"duplicates\"}\n])\n</code></pre>"},{"location":"notes/mongodb/#tools","title":"Tools","text":""},{"location":"notes/mongodb/#dump-and-restore","title":"Dump and restore","text":"<pre><code>mongodump --uri=\"mongodb://localhost:27017\" --db=recovery -o recovery_service\nmongorestore --nsFrom='recovery.*' --nsTo='recoveryx.*' recovery_service\n\n// specific collection\nmongodump --uri \"mongodb://localhost:27017\" --db user_profile --collection user_event --out \"./loan_eligibility\"\nmongorestore --uri \"mongodb://localhost:27018\" --db profile --collection user_event \"./loan_eligibility/user_profile/user_event.bson\"\n</code></pre>"},{"location":"notes/mongodb/#rename","title":"Rename","text":"<pre><code>// database\nmongodump --archive --db=recovery | mongorestore --archive  --nsFrom='recovery.*' --nsTo='recoveryx.*'\n\n// collection\ndb.payslip_fields.renameCollection(\"payslip_fieldsx\")\n</code></pre>"},{"location":"notes/mongodb/#convert","title":"Convert","text":"<pre><code>// date to date string\ndb.files.updateMany(\n    {actual_remittance_date: null},\n    [{$set: {actual_remittance_date: {$dateToString: {format: \"%Y-%m-%d\", date: \"$created_at\"}}}}]\n)\n</code></pre>"},{"location":"notes/mongodb/#profiling","title":"Profiling","text":"<pre><code>use company\ndb.setProfilingLevel(2)\ndb.getProfilingStatus()\n</code></pre>"},{"location":"notes/mongodb/#check-connection-status","title":"Check connection status","text":"<pre><code>use admin\ndb.serverStatus().connections\n</code></pre>"},{"location":"notes/mongodb/#replica-set","title":"Replica Set","text":"<pre><code>vi /usr/local/etc/mongod.conf\nreplication:\nreplSetName: rs0\n\nmongosh\nrs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"127.0.0.1:27017\"}] })\n\nenv\nMONGODB_URL=mongodb://localhost:27017/deductions_uat?replicaSet=rs0\n</code></pre> <p>Reference</p>"},{"location":"notes/mongodb/#references","title":"References","text":"<p>Setup Compass Install multiple MongoDB instances </p>"},{"location":"notes/nodejs/","title":"NodeJS","text":"<p>Node.js is a JS runtime.</p> <p>Use Node Version Manager (NVM) if needed. Virtual environment isn't necessary as package versions are automatically tracked for each project.</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_16.z | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre>"},{"location":"notes/nodejs/#npm","title":"NPM","text":"<p>Node Package Manager Packages are installed locally to the project's directory by default.</p> <p><code>package.json</code> - freezes project metadata including dependencies</p> <pre><code># creates package.json interactively\nnpm init\n\n# skip interaction\nnpm init -y\n\n# install a package\nnpm install package\nnpm i package\nnpm i -g package      # global install\nnpm install           # install from `package.json`\n\n# link a global package locally\nnpm link package\n</code></pre>"},{"location":"notes/nodejs/#exports","title":"Exports","text":"<p><code>other.js</code> <pre><code>const PI = 3.1416\n\nexports.PI = PI;\n\n// or\n\nexports = {\n    PI: PI,\n    ...\n}\n</code></pre></p> <p><code>app.js</code> <pre><code>const other = require('./other');\nconsole.log(other.PI)\n\n// or\n\nconst { PI } = require('./other');\n</code></pre></p>"},{"location":"notes/nodejs/#entry-point","title":"Entry Point","text":"<p><code>dir/index.js</code> <pre><code>const x = require('./x');\nconst y = require('./y');\nconst z = require('./z');\n\nexports = [x, y, z]\n</code></pre></p>"},{"location":"notes/nodejs/#web-app","title":"Web App","text":""},{"location":"notes/nodejs/#code-structure","title":"Code Structure","text":"<pre><code>app.js                      // or index.js\npackage.json\nmodels                      // database models\n    entity.js\nviews                       // webpages\n    home.ejs\n    error.ejs\n    entity                  // resource webpages\n        page.ejs\n    layouts                 // general page layouts\n        boilerplate.ejs\n    partials                // page components\n        navbar.ejs\n        alert.ejs\nroutes                      // route groups per resource\n    resource.ejs\ncontrollers                 // business logic\n    entity.js\npublic                      // static assets\n    javascripts\n        script.js\n    stylesheets\n        main.css\n    images\n        favicon\nutils\n    AppError.js\n    catchAsync.js\nschemas.js                  // schema validators\nmiddleware.js\nseed.js                     // populate db for dev purposes\n.env                        // environment variables\n</code></pre>"},{"location":"notes/nodejs/#express","title":"Express","text":"<p>Minimalist web framework</p> <pre><code>npm i express\n\n# automatically restarts server after changes\nnpm i -g nodemon\n\n# start app\nnode app.js\n// or better\nnodemon app.js\n\n# run script inside shell\nnode\n.load app.js\n</code></pre> <p><code>app.js</code> <pre><code>const express = require('express');\nconst path = require('path');\nconst { wrapAsync } = require('./utils');\n\nconst app = express()\nconst port = 3000\n\n\n\n// template directory\n// always relative to the root directory\napp.set('views', path.join(__dirname, 'views'));\n\n// serve static assets from a local directory, e.g. images, js, css\napp.use(express.static(path.join(__dirname, 'public')))\n\n// parse request body sent as form data\napp.use(express.urlencoded({ extended: true }))\n// parse request body as json\napp.use(express.json())\n// fine to use both simultaneously\n\n\n\n// get route\n// func is optional; used to execute a middlware before the route, e.g. authentication\napp.get('/', func, (req, res) =&gt; { \n    ...\n    res.send('Hello World!')\n})\n\n// post route\napp.post('/', (req, res) =&gt; {\n    // request body\n    const { data } = req.body;\n    ...\n    res.redirect('/');\n})\n\n\n\n// path parameters and query strings\napp.get('/r/:subreddit/:postId', validateResource, wrapAsync(async (req, res, next) =&gt; {\n    // req.params is an object containing path parameters\n    const { subreddit, postId } = req.params;\n\n    // req.query is an object containing query strings\n    const { q } = req.query;\n\n    // contains request body\n    const { resource } = req.body\n\n    ...\n\n    if (error) {\n        // important to pass the error to `next` in async functions\n        // return it to stop further code; only applicable without `wrapAsync`\n        // return next(throw new AppError('error', 404));\n\n        // or\n\n        // only works if wrapAsync is applied\n        throw new AppError('error', 404);\n    }\n\n    ...\n\n    // render template\n    // can also pass just { var } for { var: var }\n    // no need to include .ejs in filename\n    res.render(template, { key: value }) \n}))\n\n\n\n// if none of the routes matched, this 404 middleware is executed\napp.all('*', (req, res, next) =&gt; {\n    next(throw new AppError('not found', 404))\n})\n\n// custom error handler as middlware\napp.use((err, req, res, next) =&gt; {\n    const { status = 500, message = 'error'} = err;\n\n    ...\n\n    res.status(status).render('error', { err });\n\n    // or\n\n    // still call express' default error handler\n    // next(err);\n})\n\n\n\n// start app\napp.listen(port, () =&gt; {\n    console.log(`Listening on port ${port}`)\n})\n</code></pre></p> <p><code>utils/wrapAsync.js</code> <pre><code>// wrapper function to catch errors in async functions\nmodule.exports.wrapAsync = function (fn) {\n    return function(req, res, next) {\n        // returning next(e) is important to stop further code executions\n        fn(req, res, next).catch(e =&gt; next(e));\n    }\n}\n</code></pre></p> <p><code>utils/AppError.js</code> <pre><code>// custom error class\nclass AppError extends Error {\n    constructor(message, status) {\n        super();\n        this.message = message;\n        this.status = status;\n    }\n}\n\nmodule.exports = AppError\n</code></pre></p>"},{"location":"notes/nodejs/#router","title":"Router","text":"<p>Group or separate routes</p> <p><code>routes/entity.js</code> <pre><code>const express = require('express');\n// merge params from the prefix\nconst router = express.Router({mergeParams: true});\n\n// this middleware will only affect the routes specified in this router\n// e.g. authenticated routes\nrouter.use((req, res, next) =&gt; {\n    ...\n})\n\nrouter.get(route, (req, res) =&gt; {\n    ...\n})\n\n// grouping routess\nrouter.route('/')\n    .get(middleware, callable)\n    .post(middleware, callable)\n    .patch(middleware, callable)\n    .delete(middleware, callable)\n\nrouter.route('/:id')\n    .get(middleware, callable)\n    .post(middleware, callable)\n    .patch(middleware, callable)\n    .delete(middleware, callable)\n\n...\n\nmodule.exports = router;\n</code></pre></p> <p><code>app.js</code> <pre><code>const resourceRoutes = require('./routes/resource');\n\napp.use('/resource', resourceRoutes);\n</code></pre></p>"},{"location":"notes/nodejs/#middleware","title":"Middleware","text":""},{"location":"notes/nodejs/#express_1","title":"Express","text":"<p>Functions executed between the request and the response Runs code on every single request</p> <p><code>app.js</code> <pre><code>// custom middleware\n// path is optional; when not supplied, middleware will always be executed\napp.use(path, (req, res, next) =&gt; {\n    // can access and modify req object, e.g. attach a datetime\n    ...\n\n    // call the next middleware\n    next();\n\n    //or\n\n    // exit this function and stop executing any code after this point within this function\n    // return next();\n})\n</code></pre></p>"},{"location":"notes/nodejs/#method-override","title":"Method Override","text":"<p>Allows HTTP verbs when the client doesn't support them (e.g. <code>PATCH</code>, <code>DELETE</code>)</p> <pre><code>npm i method-override\n</code></pre> <p><code>app.js</code> <pre><code>const methodOverride = require('method-override')\n\n...\n\n// allows overriding http methods for when the client doesn't support them, e.g. patch\n// this particular override is triggered by query string, e.g. ?_method=PATCH\napp.use(methodOverride('_method'))\n</code></pre></p>"},{"location":"notes/nodejs/#morgan","title":"Morgan","text":"<p>Logging middleware</p> <pre><code>npm i morgan\n</code></pre> <p><code>app.js</code> <pre><code>const morgan = require('morgan');\n\n...\n\napp.use(morgan('tiny'))\n</code></pre></p>"},{"location":"notes/nodejs/#embedded-javascript-ejs","title":"Embedded JavaScript (EJS)","text":"<p>Common and popular Uses JS syntax</p> <p>Templating</p> <ul> <li>defines a pattern for a webpage  </li> <li>used for dynamic webpages</li> </ul> <pre><code>npm i ejs\n\n// extend ejs\nnpm i ejs-mate\n</code></pre> <p><code>app.js</code> <pre><code>const ejsMate = require('ejs-mate');\n\n...\n\napp.set('view engine', 'ejs');\napp.engine('ejs', ejsMate);\n</code></pre></p> <p><code>template.ejs</code> <pre><code>// include partials or subtemplates (e.g. header, nav, footer) from /views/partials or custom directory\n&lt;%- include('partials/head.ejs', { ...data }) %&gt; \n\n// js code with print; key is passed from `render`\n&lt;%= key %&gt;\n\n// js code without print\n&lt;% if (condition) { %&gt; \n    ...\n&lt;% } %&gt;\n</code></pre></p> <p><code>views/layouts/boilerplate.ejs</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;% include('../partials/navbar') %&gt;\n  &lt;% body %&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><code>views/entity/page.ejs</code> <pre><code>&lt;% layout('layouts/boilerplate') %&gt;\n...\n</code></pre></p>"},{"location":"notes/nodejs/#mongodb","title":"MongoDB","text":"<p>NoSQL Document database</p>"},{"location":"notes/nodejs/#mongoose","title":"Mongoose","text":"<p>ODM - object document mapper; map MongoDB documents to usable JS objects</p> <pre><code># mongodb odm\nnpm i mongoose\n</code></pre> <p><code>models/entity.js</code> <pre><code>const mongoose = require('mongoose');\n\n// connect to mongodb\nmongoose.connect('mongodb://localhost:27017/test', config)\n    .then(() =&gt; {\n        console.log('connection open');\n    })\n    .catch((e) =&gt; {\n        console.log('error');\n        console.log(e);\n    })\n\n// document schema\nconst resourceSchema = new mongoose.Schema({\n    field: type,\n    // built-in schema validations\n    field1: {\n        type: Number,\n        required: true,\n        min: 7,\n        max: [9, 'error msg'],\n        ...\n    }\n    ...\n})\n\n\n\n// custom instance methods\n// common pattern to process model data\n// use default function definition so `this` refers to the instance\nresourceSchema.methods.method1 = function() {\n    ...\n}\n\n// custom static methods\n// when reference to instance is not needed, e.g. findByName\nresourceSchema.statics.static1 = function() {\n    ...\n}\n\n\n\n// virtuals\n// instance properties that are not reflected to the database, e.g. fullName from/to firstName and lastName\n\n// creating a virtual for generating a virtual property from existing properties\nresourceSchema.virtual('fullName').get(function() {\n    return `${this.first} ${this.last}`;\n})\n\n// setting existing properties from a virtual property\nresourceSchema.virtual('fullName').set(function() {\n    this.first = ...;\n    this.last = ...;\n})\n\n\n\n// mongoose middlewares\n// executes before the method\nresourseSchema.pre('save', async function () {\n    ...\n})\n// executes after the method\nresourseSchema.post('save', async function () {\n    ...\n})\n\n\n\n// will create a collection called 'resources'\n// automatically pluralizes the model name\nconst Resource = mongoose.model('Resource', resourceSchema);\n\n// creates an instance but not yet inserted to the collection\nconst data1 = new Resource({ ... });\n// writes the instance to the collection\ndata1.save();\n\n\n\n// database operations\nResource.insertMany([\n    { ... },\n    ...\n])\n    .then(data =&gt; {\n        console.log(data);\n    })\n\nResource.find({ query }).then(data =&gt; data);\n\n// doesn't return updated data; only metadata\nResource.updateOne({ query }, { updates }).then(result =&gt; result);\nResource.updateMany({ query }, { updates }).then(result =&gt; result);\n\n// returns updated data\nResource.findOneAndUpdate({ query }, { updates }, {new: true, runValidators: true}).then(data =&gt; data);\n\nResource.remove({ query }).then(result =&gt; result);\nResource.deleteOne({ query }).then(result =&gt; result);\nResource.deleteMany({ query }).then(result =&gt; result);\nResource.findOneAndDelete({ query }).then(data =&gt; data);\n</code></pre></p>"},{"location":"notes/nodejs/#relationships","title":"Relationships","text":"<ol> <li>One to Few (e.g. user to saved addresses) - embed the data directly in the document     <pre><code>const { Schema } = require('mongoose');\n\nconst userSchema = new Schema({\n    first: String,\n    last: String,\n    // NOTE: addresses are directly embedded in user's document\n    addresses: [\n        {\n            // mongoose will automatically treat this as a document\n            // set `false` to disable\n            _id: { id: false },\n            street: String,\n            city: String,\n            state: String,\n            country: {\n                type: String,\n                required: true\n            }\n        }\n    ]\n})\n\nconst User = new mongoose.model('User', userSchema);\n\nconst addAddress = async id =&gt; {\n    const user = await User.findById(id);\n    user.addresses.push({...});\n    const res = await user.save();\n    return res;\n}\n</code></pre></li> <li>One to Many (e.g. user to posts, farm to produce) - store data separately and reference the id     <pre><code>const { Schema } = require('mongoose');\n\nconst productSchema = new Schema({\n    name: String,\n    price: Number,\n    season: {\n        type: String,\n        enum: ['Spring', 'Summer', 'Fall', 'Winter']\n    }\n})\n\nconst farmSchema = new Schema({\n    name: String,\n    city: String,\n    // NOTE: product ids (children) are referenced here\n    products: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }] \n})\n\nconst Product = new mongoose.model('Product', productSchema);\nconst Farm = new mongoose.model('Farm', farmSchema);\n\nconst addProduct = async (id, productData) =&gt; {\n    const product = new Product(productData);\n    const farm = await Farm.findById(id);\n    farm.products.push(product);\n    const res = await farm.save();\n    return res;\n}\n\nFarm.findById(id)\n    .populate('products') // will replace the object ids with the actual object\n    .then(farm =&gt; console.log(farm))\n</code></pre></li> <li>One to Bajillions (e.g. user to tweets) - embed parent reference inside the child document     <pre><code>const { Schema } = require('mongoose');\n\nconst userSchema = new Schema({\n    username: String\n})\n\nconst tweetSchema = new Schema({\n    text: String,\n    likes: Number,\n    // NOTE: user id (parent) is referenced here\n    user: { type: Schema.Types.ObjectId, ref: 'User' }\n})\n\nconst User = new mongoose.model('User', userSchema);\nconst Tweet = new mongoose.model('Tweet', tweetSchema);\n\nconst makeTweet = (id, tweetData) =&gt; {\n    const user = await User.findById(id);\n    const tweet = new Tweet(tweetData);\n    tweet.user = user;\n    const res = await tweet.save();\n    return res;\n}\n\nTweet.findById(id)\n    .populate('user', 'username') // rest of the arguments specify which data from user to retrieve\n    .then(tweet =&gt; console.log(tweet))\n\nTweet.findById(id)\n    .populate({ // for nested populating\n        path: 'replies',\n        populate: {\n            path: 'authors'\n        }\n    })\n    .then(tweet =&gt; console.log(tweet))\n</code></pre></li> </ol>"},{"location":"notes/nodejs/#middleware_1","title":"Middleware","text":"<p>Delete linked documents</p> <p>Automatically delete linked documents upon deleting a document</p> <pre><code>// `type` is the middlware type or action where the callback will be triggered and executed, e.g. findOneAndDelete\nfarmSchema.post(type, async function (data) {\n    if (data.products.length) {\n        await Product.deleteMany({_id: {$in: data.products}})\n    }\n})\n</code></pre>"},{"location":"notes/nodejs/#joi-schema-validation","title":"Joi (Schema Validation)","text":"<p>Schema description language Schema validator</p> <pre><code>npm i joi\n</code></pre> <p><code>schemas.js</code> <pre><code>const Joi = require('joi');\n\n// schema validator\nconst resourceJoiSchema = Joi.object({\n    num: Joi.number().required().min(0).max(99),\n    ...\n})\n\nconst c = (req, res, next) =&gt; {\n    // NOTE: schema validation\n    const { error } = resourceJoiSchema.validate(resource)\n    if (error) {\n        const msg = error.details.map(e =&gt; e.message).join(',');\n        next(throw new AppError(msg, 400));\n    }\n    next();\n}\n\nmodule.exports = {\n    validateResource\n}\n</code></pre></p>"},{"location":"notes/nodejs/#cookies","title":"Cookies","text":"<p>Bits of information stored in user's browser Sent on every subsequent requests Allow stateful HTTP</p> <pre><code>npm i cookie-parser\n</code></pre> <p><code>app.js</code> <pre><code>const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\n\napp.use(cookieParser(secret));\n\napp.get('/' (req, res) =&gt; {\n    // setting signed cookies\n    app.cookies(key, value, {signed: true});\n\n    // getting cookies\n    const { key = 'default' } = req.cookies;\n\n    // getting signed cookies\n    const { signedKey = 'default' } = req.signedCookies;\n    ...\n})\n</code></pre></p> <p>No need to reimplement HMAC as <code>cookie-parser</code> already uses this method.</p>"},{"location":"notes/nodejs/#session","title":"Session","text":"<p>Server side data store to allow stateful HTTP  </p> <pre><code># uses memory store by default; not applicable for prod, only for dev\n# use prod data store e.g. mongodb, redis\nnpm i express-session\n</code></pre> <p><code>app.js</code> <pre><code>const express = require('express');\nconst app = express();\nconst session = require('express-session');\n\nconst sessionConfig = {\n    secret: 'secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n        httpOnly: true, // security\n        expires: Date.now() + 1000 * 60 * 60 * 24 * 7, // week\n        maxAge: 1000 * 60 * 60 * 24 * 7\n    }\n}\napp.use(session(sessionConfig));\n\napp.get('/', (req, res) =&gt; {\n    // NOTE: access session data\n    req.session.key = value;\n    ...\n})\n</code></pre></p>"},{"location":"notes/nodejs/#flash","title":"Flash","text":"<p>Special area in the session Messages are written to flash and is cleared after being displayed</p> <pre><code>npm i connect-flash\n</code></pre> <p><code>app.js</code> <pre><code>const flash = require('connect-flash');\n\napp.use(session(...));\napp.use(flash());\n\n// middleware to save flash messages to locals so we don't have to always pass it to views\napp.use((req, res, next) =&gt; {\n    res.locals.messages = req.flash(key);\n    next();\n})\n\napp.get('/' (req, res) =&gt; {\n    // setting flash, usually followed by res.redirect()\n    req.flash(key, value)\n\n    // getting flash\n    req.flash(key)\n    ...\n})\n</code></pre></p>"},{"location":"notes/nodejs/#auth","title":"Auth","text":"<p>Authentication - who are you Authorization - what can you access, after authentication</p>"},{"location":"notes/nodejs/#bcrypt","title":"BCrypt","text":"<p>Password hashing function</p> <pre><code>npm i bcrypt\n</code></pre> <p><code>app.js</code> <pre><code>const bcrypt = require('bcrypt');\n\nconst hashPassword = async (pw) =&gt; {\n    // saltRounds slows hashhing for security; 12 is a sweet spot\n    const salt = await bcrypt.genSalt(saltRounds);\n\n    // salt is included in the generated hash\n    const hash = await bcrypt.hash(pw, salt);\n}\n\nconst hashPasswordMix = async (pw) =&gt; {\n    // when we don't need to generate the salt manually\n    const hash = await bcrypt.hash(pw, saltRounds);\n}\n\nconst login = async (pw, hashedPw) =&gt; {\n    const result = await bcrypt.compare(pw, hashedPw);\n    ...\n}\n</code></pre></p> <p>Authentication <pre><code>// middleware to check if user is logged in\nconst requireLogin = (req, res, next) =&gt; {\n    if (!req.session._id) {\n        return res.redirect('/login');\n    }\n    next();\n}\n\n// method to validate user\nUser.statics.findAndValidate = async function (username, password) {\n    const user = await User.findOne({ username });\n    const isValid = await bcrypt.compare(password, user.pass);\n    return isValid ? user : false;\n}\n\n// middleware to hash the password before saving to database\nUser.pre('save', async function (next) {\n    if (this.isModified('password')){\n        this.password = await bcrypt.hash(this.password, 12)\n    }\n    next();\n})\n\napp.post('/register', async (req, res) =&gt; {\n    const { username, password } = req.body;\n    const user = new User({\n        username,\n        password: hash,\n    })\n    await user.save();\n    req.session.user_id = user._id;\n    res.redirect('/');\n})\n\napp.post('/login', async (req, res) =&gt; {\n    const { username, password } = req.body;\n\n    // const user = await User.findOne({ username });\n    // const isValidPassword = bcrypt.compare(password, user.pass);\n    // or\n    const user = await User.findAndValidate(username, password);\n\n    if (user) {\n        req.session.user_id = user._id;\n        res.redirect('/secret');\n    } else {\n        res.redirect('/login');\n    }\n})\n\napp.get('/secret', (req, res) =&gt; {\n    if (!req.session._id) {\n        res.redirect('/login');\n    }\n    res.send('success');\n})\n\napp.get('/secret2', requireLogin, (req, res) =&gt; {\n    res.send('success');\n})\n\napp.post('/logout', (req, res) =&gt; {\n    req.session.destroy(); // delete all session data\n    res.redirect('/login');\n})\n</code></pre></p>"},{"location":"notes/nodejs/#passport","title":"Passport","text":"<p>Easier Auth implementation</p> <pre><code>npm i passport passport-local passport-local-mongoose\n</code></pre> <p><code>models/user.js</code> <pre><code>const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst passportLocalMongoose = require('passport-local-mongoose');\n\nconst userSchema = new Schema({\n    email: {\n        type: String,\n        required: true;\n        unique: true\n    }\n});\n\n// adds username, password and configurations\nuserSchema.plugin(passportLocalMongoose);\n\nmodule.exports = mongoose.model('User', userSchema);\n</code></pre></p> <p><code>app.js</code> <pre><code>const passport = require('passport');\nconst LocalStrategy = require('passport-local');\nconst User = require('./models/user')\nconst userRoutes = require('./routes/user')\n\napp.use(passport.initialize())\n\n// must be put after express session middleware\napp.use(passport.sessions())\n// authentication strategy\npassport.use(new LocalStrategy(User.authenticate()));\n\n// how data is stored in the session\npassport.serializeUser(User.serializeUser());\n// how to get the data out from the session\npassport.deserializeUser(User.deserializeUser())\n\n// middleware to provide values to view pages\napp.use((req, res, next) =&gt; {\n    req.locals.currentUser = req.user;\n    ...\n})\n\napp.use('/', userRoutes);\n</code></pre></p> <p><code>middleware.js</code> <pre><code>module.exports.isLoggedIn = (req, res, next) =&gt; {\n    if (!req.isAuthenticated) {\n        req.flash('error', 'not authenticated');\n        return res.redirect('/login');\n    }\n    next();\n}\n</code></pre></p> <p><code>routes/user.js</code> <pre><code>const express = require('express');\nconst router = express.Router();\nconst User = require('../models/user');\nconst catchAsync = require('../utils/catchAsync');\nconst passport = require('passport');\nconst { isLoggedIn } = require('../middleware')\n\nrouter.get('/register', (req, res) =&gt; {\n    res.render('users/register')\n})\n\nrouter.post('/register', catchAsync((req, res) =&gt; {\n    try {\n        const (username, email, password) = req.body;\n        const user = new User({username, email});\n        const newUser = await user.Register(user, password);\n\n        // log in user after registration\n        req.login(newUser, err =&gt; {\n            if (err) return next(err);\n            req.flash('success', 'Welcome!');\n            res.redirect('/');\n        })\n    } catch (E) {\n        req.flash('error', e.message);\n        res.redirect('/register')\n    }\n\n}))\n\nrouter.get('/login', (req, res) =&gt; {\n    res.render('users/login')\n})\n\nrouter.post('/login', passport.authenticate('local', { failureFlash: true, failureRedirect: '/login' }), (req, res) =&gt; {\n    req.flash('success', 'Welcome back!');\n    const returnTo = req.session.returnTo || '/';\n    delete req.session.returnTo;\n    res.redirect(returnTo);\n})\n\nrouter.get('/secret', (req, res) =&gt; {\n    // consider putting this logic to `isLoggedIn` middleware\n    if (!req.isAuthenticated) {\n        // save the original url before redirecting a non authenticated user to login so we can return the user to it\n        req.session.returnTo = req.originalUrl;\n        req.flash('error', 'not authenticated');\n        return res.redirect('/login');\n    }\n    ... \n})\n\nrouter.get('/secret2', isLoggedIn, (req, res) =&gt; {\n    ... \n})\n\nrouter.get('/logout', (req, res) =&gt; {\n    req.logout();\n    req.flash('success', 'goodbye');\n    res.redirect('/');\n})\n\nmodule.exports = router;\n</code></pre></p> <p>Authorization <pre><code>const isAuthor = (req, res, next) =&gt; {\n    const { id } = req.params;\n    const element = await Resource.findById(id);\n    if (!element.author.equals(req.user._id)) {\n        req.flash('error', 'no access');\n        return res.redirect('/');\n    }\n    next();\n}\n\napp.post('/:id', (req, res) =&gt; {\n    const { id } = req.params;\n    const element = await Resource.findById(id);\n    if (!element.author.equals(req.user._id)) {\n        req.flash('error', 'no access');\n        return res.redirect('/');\n    }\n    ...\n})\n\napp.post('/v2/:id', isAuthor, (req, res) =&gt; {\n    ...\n})\n</code></pre></p>"},{"location":"notes/nodejs/#env","title":".env","text":"<p>Environment variables</p> <pre><code>npm - dotenv\n</code></pre> <p><code>.env</code> <pre><code>KEY=value\n</code></pre></p> <p><code>app.js</code> <pre><code>if (process.env.NODE_ENV !== 'production') {\n    // use .env in dev environment\n    require('dotenv').config();\n}\n\nconst variable = process.env.KEY || 'default';\n</code></pre></p>"},{"location":"notes/nodejs/#file-upload","title":"File Upload","text":"<ol> <li>Set <code>enctype=multipart/form-data</code> to the form</li> <li>Create <code>input</code> of <code>type=\"file\"</code> element</li> <li>Add encoder middleware in back-end</li> <li>Consider constraints (e.g. max number of images, image size and resolution)</li> </ol> <pre><code>npm i multer\nnpm i cloudinary multer-storage-cloudinary\n</code></pre> <p><code>.env</code> <pre><code>CLOUDINARY_CLOUD_NAME=x\nCLOUDINARY_KEY=x\nCLOUDINARY_SECRET=x\n</code></pre></p> <p><code>cloudinary/index.js</code> <pre><code>const cloudinary = require('cloudinary').v2;\nconst { CloudinaryStorage } = require('multer-storage-cloudinary');\n\ncloudinary.config({\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n    api_key: process.env.CLOUDINARY_KEY,\n    api_secret: CLOUDINARY_SECRET\n})\n\nconst storage = new CloudinaryStorage({\n    cloudinary,\n    params: {\n        folder: 'test',\n        allowedFormats: ['jpeg', 'jpg', 'png']\n    }\n})\n\nmodule.exports = {\n    cloudinary,\n    storage\n}\n</code></pre></p> <p><code>route.js</code> <pre><code>const multer = require('multer');\nconst { storage } = require('./cloudinary');\nconst upload = multer({ storage });\n\n// route to automatically upload images\nrouter.post('/', upload.single('image'), (req, res) =&gt; {\n    // added by upload middleware\n    const image = req.file;\n\n    // for upload.multiple(name)\n    // const images = req.files.map(f =&gt; ({ path: f.path, filename: f.filename }))\n    ...\n})\n\n// route to delete images\nrouter.put('/', upload.multiple('images'), (req, res) =&gt; {\n    ...\n    // images is an array of filename (not url)\n    for (let img of images) {\n        await cloudinary.uploader.destroy(img);\n    }\n    ...\n})\n</code></pre></p>"},{"location":"notes/nodejs/#geocoding","title":"Geocoding","text":"<pre><code>npm i @mapbox/mapbox-sdk\n</code></pre> <p><code>.env</code> <pre><code>MAPBOX_TOKEN=x\n</code></pre></p> <p><code>models/entity.js</code> <pre><code>// mongodb supports geocoding, provides operations\nconst geoSchema = new Schema({\n    ...\n    geometry: {\n        type: {\n            type: String,\n            enum: ['Point'],,\n            required: true\n        },\n        coordinates: {\n            type: [Number],\n            required: true\n        }\n    }\n    ...\n})\n</code></pre></p> <p><code>controller/entity.js</code> <pre><code>const mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\nconst mapBoxToken = process.env.MAPBOX_TOKEN;\nconst geocoder = mbxGeocoding({ accessToken: mapBoxToken });\n\nconst map = async (req, res) =&gt; {\n    ...\n    // get geometry data from a place (string) e.g. Manila, Philippines \n    const geoData = await geocoder.forwardGeocode({\n        query: place,\n        limit: 1\n    }).send()\n\n    // returns a geojson; contains coordinates\n    geo.geometry = geoData.body.features[0].geometry;\n    geo.save();\n    ...\n}\n</code></pre></p>"},{"location":"notes/nodejs/#common-security-issues","title":"Common Security Issues","text":""},{"location":"notes/nodejs/#sqlnosql-injection","title":"SQL/NoSQL Injection","text":"<p>Injecting database operations via input elements</p> <pre><code>db.users.find({username: req.body.username})\n// injection: {'gt': ''}\n\n// will return all users\ndb.users.find({username: {'gt': ''}})\n</code></pre> <p>Use a database sanitation library (e.g. Express Mongoose Sanitize) <pre><code>npm i expess-mongo-sanitize\n\n// app.js\nconst mongoSanitize = require('express-mongo-sanitize');\napp.use(mongoSanitize());\n</code></pre></p>"},{"location":"notes/nodejs/#cross-site-scripting-xss","title":"Cross Site Scripting (XSS)","text":"<p>Injecting client side scripts on a web app (e.g. to steal data)  </p> <p><code>&lt;script&gt;...&lt;/script&gt;</code> on user input Adding a script to url that sends cookies to another server</p> <p>Use an HTML sanitation library (e.g. create custom JOI extension using <code>sanitize-html</code> library) Set session cookies as <code>httpOnly</code> and secure (HTTPS) Set custom session cookie name instead of the default</p>"},{"location":"notes/nodejs/#hide-errors-and-traceback","title":"Hide errors and traceback","text":""},{"location":"notes/nodejs/#add-security-headers","title":"Add security headers","text":"<p><code>helmet</code> - Express security with headers Content security policy might break the app. It controls the locations from which certain resource types may be loaded. Configure appropriately.</p> <pre><code>npm i helmet\n\n// app.js\nconst helmet = require('helmet');\napp.use(helmet());\n\napp.use(helmet.contentSecurityPolicy({\n    directives: {\n        // set sources per resource type\n        ...\n    }\n}))\n</code></pre>"},{"location":"notes/nodejs/#mongodb-atlas","title":"MongoDB Atlas","text":"<p>MongoDB as a service Has a free plan, no credit card required</p> <ol> <li>Create cluster</li> <li>Create database user</li> <li>Set network access</li> <li>Connect to cluster</li> </ol>"},{"location":"notes/nodejs/#as-session-store","title":"As session store","text":"<pre><code>npm i connect-mongo\n</code></pre> <p><code>app.js</code> <pre><code>const session = require('express-session');\nconst MongoDBStore = require('connect-mongo')(session);\n\nconst store = new MongoDBStore({\n    url: ...,\n    secret: 'x',\n    // update session one time during a 24 hour period (except for changes in session data); in seconds\n    touchAfter: 24 * 3600\n})\n\nstore.on('error' function(e){\n    console.log('session store error', e);\n})\n\nconst sessionConfig = {\n    store,\n    ...\n}\n\napp.use(session(sessionConfig));\n</code></pre></p>"},{"location":"notes/nodejs/#heroku","title":"Heroku","text":"<p>Platform as a service Has a free plan, no credit card required</p> <ol> <li>Install heroku cli</li> <li><code>heroku create</code></li> <li>Prepare env variables (e.g. database url, secrets)</li> <li>Create start script and configure env port</li> <li>Configure env variables either on Heroku website settings or Heroku cli</li> <li>Whitelist Heroku ip in mongodb atlas</li> <li>Push app code to Heroku</li> </ol> <pre><code>heroku login\nheroku create // make space for the app; do in app's root directory\nheroku logs -tail // troubleshoot heroku app\n\nheroku config:set SECRET=VALUE\nheroku restart\n</code></pre> <p><code>package.json</code> <pre><code>{\n    ...\n    \"scripts\": {\n        \"start\": \"node app.js\" // app entry point\n    }\n    ...\n}\n</code></pre></p> <p><code>app.js</code> <pre><code>// PORT is provided by heroku\nconst port = process.env.PORT || 3000;\napp.list(port, () =&gt; {\n    ...\n})\n</code></pre></p> <pre><code># push code to heroku\ngit add .\ngit commit -m \"deploy\"\ngit push heroku master\n</code></pre>"},{"location":"notes/programming/","title":"Programming","text":""},{"location":"notes/programming/#oop","title":"OOP","text":"<p>Object Oriented programming (OOP) is a programming paradigm that relies on the concept of classes and objects. It is used to structure a software program into simple, reusable pieces of code blueprints (usually called classes), which are used to create individual instances of objects.</p> <p>Benefits</p> <ul> <li>OOP models complex things as reproducible, simple structures</li> <li>Reusable, OOP objects can be used across programs</li> <li>Allows for class-specific behavior through polymorphism</li> <li>Easier to debug, classes often contain all applicable information to them</li> <li>Secure, protects information through encapsulation</li> </ul>"},{"location":"notes/programming/#principles","title":"Principles","text":""},{"location":"notes/programming/#inheritance","title":"Inheritance","text":"<p>Inheritance allows classes to inherit features of other classes. Inheritance supports reusability.</p>"},{"location":"notes/programming/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation means containing all important information inside an object, and only exposing selected information to the outside world.</p> <p>Benefits</p> <ul> <li>Adds security - Only public methods and attributes are accessible from the outside</li> <li>Protects against common mistakes - Only public fields &amp; methods accessible, so developers don\u2019t accidentally change something dangerous</li> <li>Protects IP - Code is hidden in a class, only public methods are accessible by the outside developers</li> <li>Supportable - Most code undergoes updates and improvements</li> <li>Hides complexity - No one can see what\u2019s behind the object\u2019s curtain!</li> </ul>"},{"location":"notes/programming/#abstraction","title":"Abstraction","text":"<p>Abstraction means that the user interacts with only selected attributes and methods of an object. Abstraction is using simple classes to represent complexity.</p> <p>Benefits</p> <ul> <li>Simple, high level user interfaces</li> <li>Complex code is hidden</li> <li>Security</li> <li>Easier software maintenance</li> <li>Code updates rarely change abstraction</li> </ul>"},{"location":"notes/programming/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism means designing objects to share behaviors. Using inheritance, objects can override shared parent behaviors, with specific child behaviors. Polymorphism allows the same method to execute different behaviors in two ways: method overriding and method overloading.</p> <p>Method Overriding In method overriding, a child class can provide a different implementation than its parent class.</p> <p>Method Overloading Methods or functions may have the same name, but a different number of parameters passed into the method call. Different results may occur depending on the number of parameters passed in.</p> <p>Benefits</p> <ul> <li>Objects of different types can be passed through the same interface</li> </ul>"},{"location":"notes/sql/","title":"SQL","text":""},{"location":"notes/sql/#structured-query-language","title":"Structured Query Language","text":"<p>Relational Database - a database that organizes information into one or more tables Table - a collection of data organized into rows and columns Column - a set of data values of a particular type Row - a single record in a table</p> <p>Statement - text that the database recognizes as a valid command - always end in a semi-colon</p> <p>Clauses - perform specific tasks in SQL - by convention, clauses are written in capital letters - can also be referred to as commands</p> <p>Parameter - a list of columns, data types, or values that are passed to a clause as an argument.</p> <p>Constraints <pre><code>PRIMARY KEY\nUNIQUE\nNOT NULL\nDEFAULT\n</code></pre></p> <p>CRUD <pre><code>- create table\nCREATE TABLE label (\n    label datatype constraints,\n    label datatype constraints,\n    ...\n);\n\n- insert\nINSERT INTO table_name (column_names) VALUES (values);\n\n- update\nUPDATE table_name\nSET column_name = value\nWHERE column_name operator value;\n\nALTER TABLE table_name ADD COLUMN column_name datatype;\n\n- delete\nDELETE FROM table_name\nWHERE column_name operator value;\n</code></pre></p> <p>Select <pre><code>- select\nSELECT * FROM table_name;\nSELECT column_name, column_name FROM table_name;\nSELECT column_name AS 'alias' FROM table_name;\n\n- distinct\nSELECT DISTINCT column_name FROM table_name;\n\n- where\nSELECT column_name\nFROM table_name\nWHERE column_name operator value;\n\nSELECT column_name FROM table_name WHERE column_name LIKE pattern;\nSELECT column_name FROM table_name WHERE column_name BETWEEN value AND value;\nSELECT column_name FROM table_name ORDER BY column_name ASC|DESC;\nSELECT column_name FROM table_name LIMIT value;\n\n- case\nSELECT column_name\n    CASE\n        WHEN column_name operator value THEN value;\n        ...\n        ELSE value\n    END AS value\nFROM table_name;\n\n- aggregates\nSELECT COUNT(column_name) FROM table_name;\nSELECT SUM(column_name) FROM table_name;\nSELECT MIN(column_name) FROM table_name;\nSELECT MAX(column_name) FROM table_name;\nSELECT AVG(column_name) FROM table_name;\nSELECT ROUND(column_name, decimal_places) FROM table_name;\n\n- group\nSELECT column_name\nFROM table_name\nGROUP BY &lt;col-label or number&gt;\nHAVING column_name operator value;\n\n- join\nSELECT column_name\nFROM table1 [LEFT]\nJOIN table2\n    ON table1.column_name operator table2.column_name;\n\n- union\nSELECT column_name\nFROM table1\nUNION\n    SELECT column_name FROM table1;\n\n- intermediate\nWITH label AS (\n    ...\n)\nSELECT column_name\nFROM label\nJOIN table2\n    ON condition;\n</code></pre></p> <p>Clause <pre><code>clause table_name (\n    parameter\n);\n</code></pre></p> <p>Operators <pre><code>- comparison operators\n=\n!=\n&gt;\n&lt;\n&gt;=\n&lt;=\n\n- logical operators\nAND\nOR\n\n- pattern\n*       everything\n_       exactly one character\n%       zero or more characters\n</code></pre></p> <p><code>IS [NOT] NULL</code> is a condition in SQL that returns true when the value is NULL and false otherwise.</p>"},{"location":"notes/sql/#liquibase","title":"LiquiBase","text":""},{"location":"notes/sql/#release-changelock","title":"Release changelock","text":"<pre><code>update databasechangeloglock set locked=false, lockgranted=null, lockedby=null where id=1;\nselect * from databasechangeloglock;\n</code></pre>"},{"location":"notes/tools/","title":"Tools","text":""},{"location":"notes/tools/#online","title":"Online","text":"<p>Python REPL MongoDB Playground StackEdit: Markdown Editor Sequence Diagram </p>"},{"location":"notes/tools/#library","title":"Library","text":"<p>Pydantic Model Generator</p>"},{"location":"notes/tools/#wsl","title":"WSL","text":"<p>Windows Subsystem for Linux</p> <p>Setup</p> <ol> <li>Install WSL     <pre><code>wsl -install\n</code></pre></li> <li>Reboot and finish setup</li> <li>Set username and password</li> <li>Update packages     <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></li> </ol> <p>Tips</p> <ul> <li>To open your WSL project in Windows File Explorer: <code>explorer.exe .</code></li> <li>Store your project files on the same operating system as the tools you plan to use for the fastest performance speed.</li> <li>Run Linux tools from a Windows command line: <code>wsl ls -la</code></li> <li>Run a Windows tool directly from the WSL command line: <code>notepad.exe .bashrc</code></li> <li>Mix Linux and Windows commands: <code>wsl ls -la | findstr \"git\"</code> or <code>dir | wsl grep git</code></li> </ul> <p>References Dev Environment Database Docker Basic Commands Mount Disk GPU Acceleration GUI Apps </p>"},{"location":"notes/tools/#font","title":"Font","text":"<p>Office Code Pro </p>"},{"location":"notes/tools/#terminal","title":"Terminal","text":""},{"location":"notes/tools/#windows-terminal","title":"Windows Terminal","text":"<p>Setup Settings </p>"},{"location":"notes/tools/#hyperjs","title":"Hyper.js","text":"<p>Electron-based terminal</p> <p>Setup Settings </p>"},{"location":"notes/tools/#oh-my-zsh","title":"Oh My Zsh","text":"<p>Open source, community-driven framework for managing Zsh configuration</p> <p>Setup .zshrc</p> <pre><code>sudo apt-get install zsh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# theme\nZSH_THEME=\"sammy\"\n</code></pre>"},{"location":"notes/tools/#fuzzy-finder","title":"Fuzzy Finder","text":"<p>General-purpose command-line fuzzy finder</p> <p>Setup <pre><code>git clone -depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n</code></pre></p>"},{"location":"notes/tools/#snippets","title":"Snippets","text":""},{"location":"notes/tools/#change-and-list-directory","title":"Change and list directory","text":"<pre><code># ~/.zshrc\ncd() { builtin cd \"$@\" &amp;&amp; ls; }\n</code></pre>"},{"location":"notes/tools/#theme","title":"Theme","text":""},{"location":"notes/tools/#nord","title":"Nord","text":"<p>Ports Firefox Theme Ubuntu </p> <pre><code>sudo add-apt-repository universe\nsudo apt install gnome-tweaks\n</code></pre>"},{"location":"notes/tools/#visual-studio-code","title":"Visual Studio Code","text":"<p>Source-code editor</p> <p>Setup  Turn on Settings Sync</p> <p>References Unit Testing</p>"},{"location":"notes/tools/#python","title":"Python","text":""},{"location":"notes/tools/#pyenv","title":"pyenv","text":"<p>Switch between multiple versions of Python</p> <p>Build Dependencies <pre><code>sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\\nlibncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n</code></pre></p> <p>Setup <pre><code># install\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n# optional, for better performance\ncd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src\n\n# env variables\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zprofile\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zprofile\necho 'eval \"$(pyenv init -path)\"' &gt;&gt; ~/.zprofile\n\n# init\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\n</code></pre></p> <p>Commands <pre><code>pyenv install -l\npyenv install 3.9.10\npyenv uninstall 3.9.10\n\npyenv version\npyenv versions\n\npyenv local\npyenv global\n</code></pre></p>"},{"location":"notes/tools/#poetry","title":"Poetry","text":"<p>Python packaging and dependency management made easy</p> <p>Setup  Don't install with system Python, use a newly built Python with pyenv <pre><code># ~/.zshrc\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> <p>Tab Completion with Oh My Zsh <pre><code>mkdir $ZSH_CUSTOM/plugins/poetry\npoetry completions zsh &gt; $ZSH_CUSTOM/plugins/poetry/_poetry\n\n# ~/.zshrc\nplugins=(\n    git\n    poetry\n)\n</code></pre></p> <p>Commands <pre><code>poetry new project_name # creates a new directory\npoetry init # creates poetry files inside a directory\n\npoetry install\npoetry show\n\npoetry add package\npoetry add -D package\n\npoetry remove package\npoetry remove -D package\n\npoetry env list -full-path\npoetry env remove env_name\n</code></pre></p>"},{"location":"notes/web-development/","title":"Web Development","text":""},{"location":"notes/web-development/#rest","title":"REST","text":"<p>Representational State Transfer Set of guides and standards on how client and server communicate with each other, and perform CRUD operations on a resource Main idea is to treat server data as resources that can be CRUDed Uses HTTP methods</p> <p>CRUD - Create, Read, Update and Delete RESTful - term to describe systems that follow REST</p> <pre><code>index       GET /comments               list all comments\nnew         GET /comments/new           create a new comment via form\ncreate      POST /comments              create a new comment\nshow        GET /comments/:id           list more info about a comment\nedit        GET /comments/:id/edit      update a comment via form\nupdate      PATCH /comments/:id         update a comment\ndestroy     DELETE /comments/:id        delete a comment\n</code></pre> <p>HTTP Methods</p> <ol> <li><code>GET</code><ul> <li>retrieve information</li> <li>uses query string</li> </ul> </li> <li><code>POST</code><ul> <li>submit data to server</li> <li>write, create, update data</li> <li>uses request body (e.g. json)</li> </ul> </li> <li><code>PUT</code> - update the entire resource</li> <li><code>PATCH</code> - partially update a resource</li> <li><code>DELETE</code> - destroy a resource</li> </ol> <p>HTML can only send <code>GET</code> and <code>POST</code> requests Method override may be necessary for other requests (e.g. <code>PATCH</code>, <code>DELETE</code>)</p>"},{"location":"notes/web-development/#process","title":"Process","text":"<ol> <li> <p>Planning </p> <ul> <li>Requirement analysis</li> </ul> </li> <li> <p>Defining </p> <ul> <li>Sofware Requirement Specification (SRS)</li> </ul> </li> <li> <p>Designing </p> <ul> <li>System architecture  </li> <li> <p>Design Document Specification (DDS)  </p> </li> <li> <p>Define RESTful routes  </p> </li> <li>Define data models and relationships</li> </ul> </li> <li> <p>Development </p> <ul> <li>Server and database setup  </li> <li> <p>Resource CRUD operations</p> </li> <li> <p>Front-end webpages</p> </li> <li> <p>Client-side validation</p> <ul> <li>Forms</li> </ul> </li> <li> <p>Server-side validation</p> <ul> <li>Request body</li> <li>Query string</li> <li>Database validation</li> </ul> </li> <li> <p>Error handling  </p> </li> <li> <p>Error alerts</p> </li> <li> <p>Authentication  </p> </li> <li> <p>Authorization</p> </li> <li> <p>Security issues</p> </li> </ul> </li> <li> <p>Testing </p> <ul> <li>Format  </li> <li>Lint  </li> <li>Tests</li> </ul> </li> <li> <p>Deployment </p> <ul> <li>Deployment  </li> <li>Automation</li> </ul> </li> <li> <p>Maintenance </p> <ul> <li>Metrics and Analytics</li> </ul> </li> </ol>"},{"location":"notes/web-development/#tech-stack","title":"Tech Stack","text":""},{"location":"notes/web-development/#microservice","title":"Microservice","text":"<p>Front-end Services Back-end Services</p>"},{"location":"notes/web-development/#server","title":"Server","text":"<p>Amazon Elastic Compute Cloud (EC2) Amazon Elastic Kubernetes Service (EKS) Google Cloud Platform (GCP) Heroku</p>"},{"location":"notes/web-development/#database","title":"Database","text":"<p>SQL</p> <ul> <li>MySQL</li> <li>PostgreSQL</li> </ul> <p>NoSQL</p> <ul> <li>MongoDB</li> </ul> <p>Platform</p> <ul> <li>MongoDB Atlas</li> <li>Amazon Relational Database Service (RDS)<ul> <li>PostgreSQL</li> </ul> </li> </ul>"},{"location":"notes/web-development/#storage","title":"Storage","text":"<p>Minio NextCloud</p>"},{"location":"notes/web-development/#session-data","title":"Session Data","text":"<p>redis MongoDB</p>"},{"location":"notes/web-development/#broker","title":"Broker","text":"<p>redis Kafka</p>"},{"location":"notes/web-development/#container","title":"Container","text":"<p>Docker Kubernetes</p> <p>Platform</p> <ul> <li>Amazon Elastic Container Registry (ECR)</li> </ul>"},{"location":"notes/web-development/#monitor","title":"Monitor","text":"<p>Amazon CloudWatch</p> <ul> <li>Metrics</li> <li>Alarms</li> </ul> <p>Sentry</p> <ul> <li>Alerts</li> </ul>"},{"location":"notes/web-development/#cicd","title":"CICD","text":"<p>GitHub Actions Jenkins</p>"},{"location":"notes/web-development/#development","title":"Development","text":"<p>Skaffold</p>"},{"location":"notes/web-development/#repository","title":"Repository","text":"<p>Nexus</p>"},{"location":"notes/web-development/#third-party","title":"Third Party","text":"<p>Customer.io - automated messaging platform Segment - Customer Data Platform (CDP)</p>"},{"location":"notes/web-development/#database_1","title":"Database","text":""},{"location":"notes/web-development/#why-use-a-database","title":"Why use a database?","text":"<ul> <li>handle huge data efficiently and compactly</li> <li>easier CRUD operations</li> <li>offer security and access features</li> <li>scale well</li> </ul>"},{"location":"notes/web-development/#sql-vs-nosql","title":"SQL vs. NoSQL","text":"<p>SQL is the programming language used to interface with relational databases. NoSQL is a class of DBMs that are non-relational and generally do not use SQL.</p> SQL NoSQL relational non-relational table-based can be document based, key-value pairs, graph databases vertically scalable by increasing the processing power of existing hardware master-slave architecture which scales better horizontally with additional servers or nodes predefined schema dynamic schema for unstructured data ACID BASE <p>When SQL</p> <ul> <li>Analyzing behavioral related and customized sessions</li> <li>It allows you to store and gets data from the database quickly</li> <li>Preferred when you want to use joins and execute complex queries</li> <li>Conceptually modeled as tabular</li> <li>In systems where consistency is critical</li> </ul> <p>Small business\u2019 accounting systems, sales databases, or transactional systems like payment processing in e-commerce.  </p> <p>When NoSQL</p> <ul> <li>When ACID support is not needed</li> <li>When traditional RDBMS model is not enough</li> <li>Data which need a flexible schema</li> <li>Constraints and validations logic not required to be implemented in database</li> <li>Logging data from distributed sources</li> <li>It should be used to store temporary data like shopping carts, wish list and session data</li> <li>Data sets which are both large and mutate significantly</li> <li>Businesses growing extremely fast but lacking data schema</li> </ul> <p>In terms of use cases, this might translate to social networks, online content management, streaming analytics, or mobile applications.</p> <p>ACID</p> <p>Atomicity - An \"all or nothing\" approach. If any statement in the transaction fails, the entire transaction is rolled back.</p> <p>Consistency - The transaction must meet all protocols defined by the system. No half completed transactions.</p> <p>Isolation - No transaction has access to any other transaction that is in an intermediate or unfinished state. Each transaction is independent. Durability - Ensures that once a transaction commits to the database, it is preserved through the use of backups and transaction logs.</p> <p>BASE</p> <p>Basically Available - Guarantees the availability of the data. There will be a response to any request (can be failure too).</p> <p>Soft state - The state of the system could change over time.</p> <p>Eventual consistency - The system will eventually become consistent once it stops receiving input.</p> <p>NoSQL databases give up the A, C and/or D requirements, and in return they improve scalability.</p>"},{"location":"notes/web-development/#mongodb","title":"MongoDB","text":"<ul> <li>commonly used with Node.js and Express (MEAN and MERN stack)</li> <li>easy to get started with</li> <li>plays well with JS</li> <li>strong community</li> </ul>"},{"location":"notes/web-development/#bson-vs-json","title":"BSON vs. JSON","text":"<p>BSON</p> <ul> <li>binary JSON</li> <li>data used by MongoDB</li> <li>supports more data types</li> </ul> <p>JSON</p> <ul> <li>slow</li> <li>not compact</li> <li>supports limited data types</li> </ul>"},{"location":"notes/web-development/#relationships","title":"Relationships","text":"<ol> <li>One to Few - embed the data directly in the document</li> <li>One to Many - store data separately and reference the ID</li> <li>One to Bajillions - embed parent reference inside the child document</li> </ol>"},{"location":"notes/web-development/#schema-design","title":"Schema Design","text":"<ol> <li>Favor embedding unless there is a compelling reason not to.</li> <li>Needing to access an object on its own is a compelling reason not to embed it.</li> <li>Arrays should not grow without bound.<ul> <li>if more than a couple hundred, don't embed</li> <li>if more than a few thousand, don't embed object ID references, use one-to-bajillions relationship</li> </ul> </li> <li>Don't be afraid of application-level joins.</li> <li>Consider write/read ratio when denormalizing.</li> <li>Data model should depend on application's data access pattern.</li> </ol> <p>Denormalization - making fields available on multiple locations for faster read</p> <ul> <li>base on data access flow<ul> <li>consider how often data are accessed</li> <li>consider whether mongo will join/populate</li> </ul> </li> <li>two way references - both parent and child have references to each other</li> <li>reference + important fields     <pre><code>[\n    {\n        _id- id,\n        field- \"value\",\n        ...\n    },\n    ...\n]\n</code></pre></li> </ul>"},{"location":"notes/web-development/#architecture","title":"Architecture","text":""},{"location":"notes/web-development/#serverless","title":"Serverless","text":"<p>Serverless computing is a method of providing backend services on an as-used basis. A serverless provider allows users to write and deploy code without the hassle of worrying about the underlying infrastructure.</p> <p>Traditional Servers</p> <ul> <li>We are charged for keeping the server up even when we are not serving out any requests.</li> <li>We are responsible for uptime and maintenance of the server and all its resources.</li> <li>We are responsible for applying the appropriate security updates to the server.</li> <li>As our usage scales we need to manage scaling up our server as well.</li> <li>And as a result manage scaling it down when we don\u2019t have as much usage.</li> </ul> <p>Advantages</p> <ul> <li>No server management is necessary</li> <li>Developers are only charged for the server space they use, reducing cost</li> <li>Serverless architectures are inherently scalable</li> <li>Quick deployments and updates are possible</li> <li>Code can run closer to the end user, decreasing latency</li> </ul> <p>Disadvantages</p> <ul> <li>Testing and debugging become more challenging</li> <li>Serverless computing introduces new security concerns (e.g. multitenancy)</li> <li>Serverless architectures are not built for long-running processes</li> <li>Performance may be affected (e.g. cold start)</li> <li>Vendor lock-in is a risk</li> </ul> <p>When to use</p> <ul> <li>decrease go-to-market time</li> <li>build lightweight, flexible applications that can be expanded or updated quickly</li> <li>inconsistent usage, with peak periods alternating with times of little to no traffic</li> <li>push some or all of application functions close to end users for reduced latency</li> </ul> <p>When to avoid</p> <ul> <li>large applications with a fairly constant, predictable workload</li> <li>difficult to migrate legacy applications to a new infrastructure with an entirely different architecture</li> </ul>"},{"location":"notes/web-development/#concepts","title":"Concepts","text":""},{"location":"notes/web-development/#cookies","title":"Cookies","text":"<p>Bits of information stored in user's browser Sent on every subsequent requests Allow stateful HTTP</p> <p>Cons</p> <ul> <li>has a max size</li> <li>not as secure as sessions</li> </ul> <p>Uses</p> <ul> <li>session management</li> <li>personalization</li> <li>tracking</li> </ul> <p>Cookie Signing - to verify that data has not been tampered HMAC - hash-based authentication code</p>"},{"location":"notes/web-development/#session","title":"Session","text":"<p>Server side data store to allow stateful HTTP Why? Not practical and secure to store a lot of data in client-side cookies</p> <p>Session and Cookie</p> <ol> <li>session stores user data on a data store (e.g. MongoDB, redis)</li> <li>cookie unlocks said session data</li> </ol>"},{"location":"notes/web-development/#flash","title":"Flash","text":"<p>Special area in the session Messages are written to flash and is cleared after being displayed</p>"},{"location":"notes/web-development/#auth","title":"Auth","text":"<p>Authentication - who are you Authorization - what can you access, after authentication</p> <p>Never store passwords in plain text</p> <p>Hash Passwords - run passwords through a hashing function and store it in the database Hashing Functions - map input data of arbitrary size to fixed-size output values</p> <p>Cryptographic Hash Functions (Password Safe)</p> <ol> <li>One-way function which is infeasible to invert.</li> <li>Small change in input yields large change in the output.</li> <li>Deterministic - same input yields same output.</li> <li>Unlikely to find two outputs with same value.</li> <li>Password hash functions are deliberately slow.</li> </ol> <p>Salt - extra safeguard from reverse lookup (e.g. map of hashed passwords with common passwords) Password Salt - random value added to the password before hashings</p>"},{"location":"notes/web-development/#bcrypt","title":"BCrypt","text":"<p>Password hashing function</p> <ol> <li>generate salt</li> <li>hash password with salt</li> </ol>"},{"location":"notes/web-development/#oauth","title":"OAuth","text":"<p>OAuth 2.0 is the industry-standard protocol for authorization (not authentication)</p> <ul> <li>authorization between services</li> <li>access delegation</li> <li>allow services limited access to your resources from another service on your behalf</li> <li>e.g. allow a service to upload photos from your google drive</li> </ul> <p>Authorization Token - key for limited access</p> <ul> <li>contains user-allowed permissions</li> <li>trustable and cannot be tampered</li> <li>can be in JWT</li> </ul> <p>Resource (R) - protected entity (e.g. photos) Resource Owner (RO) - entity capable of granting access to a protected resource (e.g. user) Resource Server (RS) - server hosting the protected resource (e.g. Google server) Client (C) - application making protected resource requests on behalf of the resource owner (e.g. photo printing app) Authorization Server (AS) - server issuing access tokens to the client (e.g. Google's authorization server)</p> <p>Client would need to register with an OAuth 2.0 provider which will supply client credentials (ID and secret) to uniquely identify it.</p> <p>Authorization Code Flow Safest Web application workflow The way the client passes the authorization token to gain the access token can be secured</p> <ol> <li>RO requests service from C</li> <li>C requests access from AS</li> <li>AS asks permission from RO</li> <li>RO consents</li> <li>AS sends authorization token to C</li> <li>C requests access token from AS with the authorization token</li> <li>AS sends access token to C</li> <li>C requests access to R from RS with the access token</li> <li>RS provides access to C</li> </ol> <p>Implicit Flow Simplified Not as secure Primarily used with short-lived access tokens Any service who obtains the access token can get access</p> <ol> <li>RO requests service from C</li> <li>C requests access from AS</li> <li>AS asks permission from RO</li> <li>RO consents</li> <li>AS sends access token directly to the C</li> <li>C requests access to R from RS with the access token</li> <li>RS provides access to C</li> </ol> <p>Client Credentials Flow Used for authorization between microservices When the Client is well trusted</p> <ol> <li>S1 requests from AS</li> <li>AS sends access token to S1</li> <li>S1 requests from S2 with the access token</li> <li>S2 provides access to S1</li> </ol> <p>OAuth 2.0 in Python</p>"},{"location":"notes/web-development/#jwt","title":"JWT","text":"<p>JSON Web Token Pronounced as jawt Provides secure communication between services Used for authorization RFC 7519</p> <p>Authorization Strategies</p> <ol> <li>Session Token<ul> <li>server keeps session data to keep track of user</li> <li>can be unlocked by session ID (stored in cookies)</li> <li>session ID + cookies is the most popular mechanism for authorization</li> <li>reference token (reference to a state)</li> </ul> </li> <li>JWT<ul> <li>client is given a signed token that is sent for every request</li> <li>value token (contains the values itself)</li> </ul> </li> </ol> <p>HTTP is a stateless protocol. Information must be sent in every request for dynamic web applications.</p> <p>Motivation for JWT With a load balancer, session data may be available on one server instance but not the others. This can be solved by a shared cache (redis). However, this allows a single point of failure. When redis is down then all sessions are down. This can be solved by sticky session. Or by JWT which attaches necessary information for every request.</p>"},{"location":"notes/web-development/#https","title":"HTTPS","text":"<p>Secure communication over the Internet</p> <p>Prerequisites Need to trust that public key cryptography and signature works</p> <ol> <li>Any message encrypted with the public key can only be decrypted with the private key.</li> <li>Anyone with access to the public key can verify that a message (signature) could only have been created by someone with access to the private key</li> </ol> <p>Certificate Authority (CA) - trusted issuer of digital certificates</p> <p>Secure Sockets Layer (SSL) - public key encryption to secure data SSL Certificate - used to authenticate the identity of a website Transport Layer Security (TLS) - successor to SSL SSL and TLS can be used interchangeably</p> <p>SSL/TLS Handshake</p> <ol> <li>Browser requests website</li> <li>Website sends a certificate signed by CA containing its public key</li> <li>Browser knows and trusts CA, and can verify the certificate using CA's public key</li> <li>Browser verifies and creates new secret encrypted with website's public key</li> <li>Website decrypts the secret using its private key (only the trusted website can decrypt)</li> <li>Browser and website are the only two machines who know the secret key, both will encrypt all further communications using the key</li> </ol> <p>Certificate Signing</p> <ol> <li>Web server creates a key pair</li> <li>Web server creates a Certificate Signing Request (CSR) with the key pair and requests it to be signed by CA</li> <li>CA signs the request with its private key. Anyone with CA's public key can verify the certificate</li> </ol> <p>Trusted CA can prevent MITM attack as attacker's certificate is not signed by CA</p> <p>Self-signed Certificate</p> <ul> <li>sometimes, it's not necessary to have a CA (e.g. staging environment)</li> <li>sign CSR with own key pair</li> </ul> <p>Setup depends on the web server platform.</p>"},{"location":"notes/web-development/#cdn","title":"CDN","text":"<p>Content Delivery Network A geographically distributed group of servers which work together to provide fast delivery of content Content includes cacheable static data such as HTML pages, javascript files, stylesheets, images, and videos Reduces the distance between users and server providing the content</p> <p>Benefits</p> <ul> <li>Improves website load time</li> <li>Reduces bandwidth costs on main server</li> <li>Increases content availability and redundancy </li> <li>Improves website security through obcurity</li> </ul> <p>Setup depends on the CDN provider.</p>"},{"location":"notes/web-development/#cors-vs-csp","title":"CORS vs. CSP","text":"<p>Cross-Origin Resource Sharing (CORS) is a HTTP-header based mechanism that allows a server to indicate any origins other than its own from which a browser should permit loading of resources.</p> <p>The goal of Content Security Policy (CSP) is to protect against Cross-Site Scripting (XSS) attacks by dictating which scripts should be trusted and which shouldn't.</p> <p>Rules</p> <ol> <li>You want to request a resource from another site - What CORS policies do they have in place?</li> <li>Another site wants to request a resource from your site - what CORS policies do you have in place?</li> <li>You want to load a resource (script, image, whatever) from another site - does your Content Security Policy allow you to load resources from that domain?</li> </ol> <p>Reference</p>"},{"location":"notes/web-development/#file-upload","title":"File Upload","text":"<ol> <li>Set <code>enctype=multipart/form-data</code> to the form</li> <li>Create <code>input</code> of <code>type=\"file\"</code> element</li> <li>Add encoder middleware in back-end</li> <li>Consider constraints (e.g. max number of images, image size and resolution)</li> </ol>"},{"location":"notes/web-development/#common-security-issues","title":"Common Security Issues","text":""},{"location":"notes/web-development/#sqlnosql-injection","title":"SQL/NoSQL Injection","text":"<p>Injecting database operations via input Use a database sanitation library</p>"},{"location":"notes/web-development/#cross-site-scripting-xss","title":"Cross Site Scripting (XSS)","text":"<p>Injecting client side scripts on a web app (e.g. to steal data)</p> <p><code>&lt;script&gt;...&lt;/script&gt;</code> on user input Adding a script to url that sends cookies to another server</p> <p>Use an HTML sanitation library Set session cookies as <code>httpOnly</code> and secure (HTTPS) Set custom session cookie name instead of the default</p>"},{"location":"notes/web-development/#hide-errors-and-traceback","title":"Hide errors and traceback","text":""},{"location":"notes/web-development/#add-security-headers","title":"Add security headers","text":"<p>Use a library that adds security headers</p>"},{"location":"notes/web-development/#templates","title":"Templates","text":""},{"location":"notes/web-development/#python","title":"Python","text":"<p>A cookiecutter for Python projects</p> <p>Also includes the following templates</p> <ul> <li><code>Makefile</code></li> <li><code>.gitignore</code></li> <li><code>.dockerignore</code></li> <li><code>Dockerfile</code></li> <li>Pull Request</li> <li>GitHub Actions CI</li> </ul>"},{"location":"notes/web-development/#deployment","title":"Deployment","text":""},{"location":"notes/web-development/#heroku","title":"Heroku","text":"<p>Platform as a service Has a free plan, no credit card required</p> <ol> <li>Install heroku cli</li> <li><code>heroku create</code></li> <li>Prepare env variables (e.g. database url, secrets)</li> <li>Create start script and configure env port</li> <li>Configure env variables either on Heroku website settings or Heroku cli</li> <li>Whitelist Heroku ip in mongodb atlas</li> <li>Push app code to Heroku</li> </ol> <pre><code>heroku login\nheroku create // make space for the app; do in app's root directory\nheroku logs -tail // troubleshoot heroku app\n\nheroku config:set SECRET=VALUE\nheroku restart\n\n# push code to heroku\ngit add .\ngit commit -m \"deploy\"\ngit push heroku master\n</code></pre>"},{"location":"notes/web-development/#roadmap","title":"Roadmap","text":"<ol> <li>Pick a framework - React</li> <li>Master CSS</li> <li>Explore back-end- Python</li> <li>Learn SQL</li> <li>Build something</li> </ol>"},{"location":"notes/web-development/#best-practices","title":"Best Practices","text":""},{"location":"notes/web-development/#self-documenting-code","title":"Self-documenting code","text":""},{"location":"notes/web-development/#create-and-follow-code-guidelines","title":"Create and follow code guidelines","text":""},{"location":"notes/web-development/#notes","title":"Notes","text":""},{"location":"notes/web-development/#confidence-comes-with-practice","title":"Confidence comes with practice","text":""},{"location":"notes/web-development/#developers-are-always-learning","title":"Developers are always learning","text":""},{"location":"notes/web-development/#dont-memorize","title":"Don't memorize","text":"<p>Use google Read documentations Copy good code</p>"},{"location":"notes/web-development/#library-vs-framework","title":"Library vs. Framework","text":"<p>Library - you control the code Framework - you follow its structure</p>"},{"location":"notes/web-development/#resource-vs-model","title":"Resource vs. Model","text":"<p>Resource - what the clients interface with via endpoints and HTTP methods Model - internal representation of entities as object (ORM/ODM)</p>"},{"location":"python/celery/","title":"Celery","text":"<p><code>celery.py</code> <pre><code>from celery import Celery\nfrom settings import BROKER_URL, REDIS_MASTER\n\napp = Celery('tasks')\napp.conf.broker_url = BROKER_URL\napp.conf.broker_transport_options = {'master_name': REDIS_MASTER}\n</code></pre></p> <p><code>send.py</code> <pre><code>from celery import app\n\n# task queue\napp.send_task(\n    name='engine.tasks.test_data',\n    task_id=7,\n    queue='engine',\n    kwargs={\n        ...\n    }\n)\n\n# task listener\n@app.task(acks_late=True)\ndef test_task(...):\n    ...\n</code></pre></p> <p><code>cli</code> <pre><code>$ celery -A path.to.tasks worker -l info -Q queue_name # path in this case is `send`\n</code></pre></p>"},{"location":"python/click/","title":"Click","text":"<p>Structure <pre><code>project\n    __init__.py\n    cli\n        __init__.py\n        base.py\n        utils.py\n        check               # command group\n            __init__.py\n            commands.py     # subcommands\n</code></pre></p> <p><code>base.py</code> <pre><code>import click\n\nfrom check import commands\nfrom utils import configure_logging\n\n@click.group()\n@click.option('--debug', is_flag=True)\ndef main(debug):\n    if debug:\n        configure_logging(level=logging.DEBUG)\n    else:\n        configure_logging()\n\n\nmain.add_command(check)\n</code></pre></p> <p><code>check/commands.py</code> <code>$ check test ...</code> <pre><code>import click\n\n@click.group()\n@click.pass_context\ndef check(ctx):\n    \"\"\"check command\"\"\"\n    pass\n\n@check.command()\n@click.pass_context\n@click.option(...)\ndef test(ctx, ...):\n    \"\"\"test subcommand\"\"\"\n    ...\n</code></pre></p>"},{"location":"python/concept/","title":"Concept","text":""},{"location":"python/concept/#data-types","title":"Data Types","text":"<pre><code>var = 7         # integer\nvar = 3.14      # float\n\nvar = True      # boolean\nvar = False\n\nvar = \"hi\"      # string\n</code></pre>"},{"location":"python/concept/#comment","title":"Comment","text":"<pre><code># single line\n\n\"\"\"multi-line\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nAenean efficitur tristique neque in facilisis. Donec commodo varius sem,\neu pellentesque tortor congue varius. Nullam et felis convallis,\nornare ipsum vitae, tincidunt mi.\n\nDuis eu laoreet leo.\n    Vestibulum ante ipsum primis in faucibus orci luctus\n        et ultrices posuere cubilia curae;\n    Maecenas id sapien et arcu interdum dictum.\n\"\"\"\n</code></pre>"},{"location":"python/concept/#operators","title":"Operators","text":""},{"location":"python/concept/#math","title":"Math","text":"<pre><code>+               # add\n-               # subtract\n*               # multiply\n/               # divide\n**              # exponent\n%               # modulo\n</code></pre>"},{"location":"python/concept/#comparison","title":"Comparison","text":"<pre><code>==              # equal to\n!=              # not equal\n&lt;               # less than\n&lt;=              # less than or equal\n&gt;               # greater than\n&gt;=              # greater than or equal\n</code></pre>"},{"location":"python/concept/#logical","title":"Logical","text":"<pre><code>and\nor\nnot\n</code></pre>"},{"location":"python/concept/#bitwise","title":"Bitwise","text":"<pre><code>&gt;&gt;              # shift right\n&lt;&lt;              # shift left\n\n&amp;               # bitwise and\n|               # bitwise or\n^               # bitwise xor\n~               # bitwise not\n\n0b              # binary format\n\nbin()           # return binary\noct()           # return octal\nhex()           # return hexadecimal\n</code></pre>"},{"location":"python/concept/#walrus","title":"Walrus","text":"<p>Assign variables in the middle of expressions Helps avoid repetitive code</p> <pre><code>if (var := x % 3) != 0:\n    print(var)\n</code></pre>"},{"location":"python/concept/#string","title":"String","text":"<pre><code># escape character\n\"\\n\"\n\nvar = \"test\"\n\n# access by index\nvar[index]\nvar[start:end:step]\n\n# return length\nlen(var)\n\n# methods\nstr.lower()                     # return lowercase\nstr.upper()                     # return uppercase\nstr.isalpha()                   # return True if letters only\n\nstr.startswith(substr)          # does str start with substr?\nstr.endswith(substr)            # does str end with substr?\nstr.removeprefix(substr)        # remove prefix\nstr.removesuffix(substr)        # remove suffix\n\n# cast\nstr(non_str)\n\n# concatenation\nvar = \"str1\" + \"str2\"\n\n# formatting\n\"Hi, {}. You are {}.\".format(name, age)     # format\nf\"Hi, {name}. You are {age}.\"               # f-strings, faster\n\n# input\nvar = input(prompt_str)\n</code></pre>"},{"location":"python/concept/#datetime","title":"Datetime","text":"<pre><code>from datetime import datetime\n\nvar = datetime.now()        # current date and time\nvar = datetime.utcnow()     # current date and time in UTC\nvar.year                    # year\nvar.month                   # month\nvar.day                     # day\nvar.hour                    # hour\nvar.minute                  # minute\nvar.second                  # second\n</code></pre>"},{"location":"python/concept/#control-flow","title":"Control Flow","text":""},{"location":"python/concept/#if","title":"If","text":"<pre><code>if condition:\n    ...\nelif condition:\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"python/concept/#function","title":"Function","text":"<pre><code># definition\ndef function(parameters):\n    ...\n\n# execution\nfunction(parameters)\n</code></pre>"},{"location":"python/concept/#lambda","title":"Lambda","text":"<p>Anonymous function <pre><code># syntax\nlambda x: expression\n\n# example\nfilter(lambda x: expression, data)\n</code></pre></p>"},{"location":"python/concept/#modules","title":"Modules","text":"<pre><code># generic import\nimport module\nmodule.function()\n\n# function import\nfrom module import function\n\n# universal import\nfrom module import *\n\n# print functions and variables\nvar = dir(module)\nprint(var)\n</code></pre>"},{"location":"python/concept/#built-in-methods","title":"Built-in Methods","text":"<pre><code># iterables\nmax(iterable)\nmin(iterable)\nsum(iterable)\n\n# absolute value\nabs(number)\n\n# data type\ntype(data)\n\n# cast\nint(data, base)\nfloat(data)\n\n# generator to count from start to end at step interval\nrange(start, end, step)\n</code></pre>"},{"location":"python/concept/#list","title":"List","text":"<pre><code># syntax\nlist1 = [item1, item2]\n\n# access\nlist1[index] = item\nlist1[start:stop:step]\n\n# add item\nlist1.append(item)\n\n# concatenate\nlist3 = list1 + list2\n\n# list length\nlen(list1)\n\n# methods\nlist1.index(item)                # return index where item is\nlist1.insert(index, item)        # insert item at index\nlist1.sort()                     # sort list\nlist1.remove(item)               # delete first occurrence of item\nlist1.pop(index)                 # delete and return item at index\n\n# delete item at index\ndel(list1[index])\n\n# populate a list\nlist1 = [items] * multiplier\n\n# join a list into a string separated by the delimiter\ndelimiter.join(list)\n\n# condition where item x is not in list y\nif x not in y:\n    ...\n\n# list comprehension\nlist1 = [expression for i in iterable if condition]\n</code></pre>"},{"location":"python/concept/#dictionary","title":"Dictionary","text":"<pre><code># syntax\ndict = {key: value}\ndict[key] = value\n\n# delete a key-value pair\ndel dict[key]\ndict.pop(key, None)\n\ndict.items()            # iterable of key-value pairs\ndict.keys()             # iterable of keys\ndict.values()           # iterable of values\n\n# update with another dictionary\ndict1.update(dict2)\n\n# combine dictionaries\ndict3 = dict1 | dict2\ndict1 |= dict2\n\n# dictionary comprehension\ndict = {key: value for i in iterable if condition}\n</code></pre>"},{"location":"python/concept/#loops","title":"Loops","text":""},{"location":"python/concept/#for","title":"For","text":"<pre><code>for var in iterable:\n    ...\n# only executed if the loop isn't terminated by a break or return\nelse:\n    ...\n\n# create a range\nfor num in range(start, end, step):\n    ...\n\n# unpacking\nfor var1, var2 in zip(list1, list2):\n    ... \n\n# add index\nfor index, item in enumerate(iterable):\n    ...\n</code></pre>"},{"location":"python/concept/#while","title":"While","text":"<pre><code>while condition:\n    ...\n# only executed if the loop isn't terminated by a break or return\nelse:\n    ...\n</code></pre>"},{"location":"python/concept/#statements","title":"Statements","text":"<pre><code>break       # terminates a loop\ncontinue    # skips an iteration\n</code></pre>"},{"location":"python/concept/#class","title":"Class","text":"<pre><code>class ClassName(BaseClass):\n    def __init__(self, parameters):\n        super().__init__(parameters)\n        super().method()\n\n        self.attribute = value\n\ninstance = ClassName(parameters)\n</code></pre>"},{"location":"python/concept/#file","title":"File","text":"<pre><code># open\nf = open(\"file\", \"mode\")\n\n# methods\nf.write(\"str\")\nf.read()\nf.readline()\nf.close()\nf.closed\n\n# context manager\nwith open(\"file\", \"mode\") as f:\n    f.method()\n</code></pre>"},{"location":"python/concept/#and","title":"* and **","text":"<pre><code># unpacks lists and tuples\nlist3 = [7, *list1, *list2]\n\n# unpacks dictionaries\ndict3 = {\n    \"key\": \"value\",\n    **dict1,\n    **dict2\n}\n\n# args and kwargs parameters\ndef test(var, *args, **kwargs):\n    ...\n    # args is a tuple containing the rest of the positional arguments \n    # kwargs is a dictionary containing the rest of the keyword arguments\n</code></pre>"},{"location":"python/concept/#try-catch","title":"Try-Catch","text":"<pre><code>try:\n    ...\nexcept (TypeError, ValueError) as e:\n    ...\nexcept ZeroDivisionError:\n    ...\n</code></pre>"},{"location":"python/concept/#custom-exception","title":"Custom Exception","text":"<pre><code>class AppError(Exception):\n    pass\n\nraise AppError(\"error\")\n</code></pre>"},{"location":"python/concept/#dynamic-object-gettersetter","title":"Dynamic Object Getter/Setter","text":"<pre><code>var = getattr(object, property)\nsetattr(object, property, value)\n</code></pre>"},{"location":"python/concept/#decorator","title":"Decorator","text":""},{"location":"python/concept/#basic","title":"Basic","text":"<pre><code>import functools\n\ndef test(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        ...\n        value = func(*args, **kwargs)\n        ...\n        return value\n    return wrapper\n\n@test\ndef check(...):\n    ...\n</code></pre>"},{"location":"python/concept/#arguments","title":"Arguments","text":"<pre><code>def test(arg):\n    def decorator_test(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n                ...\n            value = func(*args, **kwargs)\n            ...\n            return value\n        return wrapper\n    return decorator_test\n\n@test(arg)\ndef v(...):\n    ...\n</code></pre>"},{"location":"python/concept/#flexible","title":"Flexible","text":"<pre><code># decorator with or without arguments\n# * forces the right side parameters to be keyword parameters only\n# if no arguments were passed, the function is directly passed to `test`\n# this is why `_func` is necessary to catch the decorated function\ndef test(_func=None, *, kwarg=7):\n    def decorator_test(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            ...\n            value = func(*args, **kwargs)\n            ...\n            return value\n        return wrapper\n\n    if _func is None:\n        return decorator_test\n    else:\n        return decorator_test(_func)\n</code></pre>"},{"location":"python/concept/#stateful","title":"Stateful","text":"<pre><code>import functools\n\ndef count_calls(func):\n    @functools.wraps(func)\n    def wrapper_count_calls(*args, **kwargs):\n        wrapper_count_calls.num_calls += 1\n        print(f\"Call {wrapper_count_calls.num_calls} of {func.__name__!r}\")\n        return func(*args, **kwargs)\n    wrapper_count_calls.num_calls = 0\n    return wrapper_count_calls\n\n@count_calls\ndef say_whee():\n    print(\"Whee!\")\n</code></pre>"},{"location":"python/concept/#class_1","title":"Class","text":"<pre><code>import functools\n\nclass CountCalls:\n    def __init__(self, func):\n        functools.update_wrapper(self, func)\n        self.func = func\n        self.num_calls = 0\n\n    def __call__(self, *args, **kwargs):\n        self.num_calls += 1\n        print(f\"Call {self.num_calls} of {self.func.__name__!r}\")\n        return self.func(*args, **kwargs)\n\n@CountCalls\ndef say_whee():\n    print(\"Whee!\")\n</code></pre>"},{"location":"python/concept/#class-arguments","title":"Class Arguments","text":"<pre><code>class CountCalls:\n    def __init__(self, *args, **kwargs):\n        self.num_calls = 0\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self, func):\n        functools.update_wrapper(self, func)\n        self.func = func\n        def wrapper(*args, **kwargs):\n            self.num_calls += 1\n            wrapper.num_calls = self.num_calls\n            print(f\"Call {self.num_calls} of {self.func.__name__!r}\")\n            print(self.args, self.kwargs)\n            return self.func(*args, **kwargs)\n        return wrapper\n\n@CountCalls(\"test\")\ndef say_whee(whee=\"Whee!\"):\n    print(whee)\n</code></pre>"},{"location":"python/concept/#modules_1","title":"Modules","text":""},{"location":"python/concept/#defaultdict","title":"defaultdict","text":"<pre><code>from collections import defaultdict\n\n# returns 0 if key is not present\nvar = defaultdict(int)\n</code></pre>"},{"location":"python/concept/#deepcopy","title":"deepcopy","text":"<pre><code>from copy import deepcopy\n\n# copies deeply as opposed to shallow\nvar2 = deepcopy(var1)\n</code></pre>"},{"location":"python/concept/#breakpoint","title":"breakpoint","text":"<pre><code>breakpoint()\n</code></pre>"},{"location":"python/concept/#traceback","title":"traceback","text":"<pre><code>import traceback\n\nprint(traceback.format_exc())\n</code></pre>"},{"location":"python/concept/#patch","title":"patch","text":""},{"location":"python/concept/#environment-variable","title":"Environment Variable","text":"<pre><code>import os\nfrom unittest.mock import patch\n\n@patch.dict(os.environ, {\"RISK_SERVICE_URL\": test_url})\n</code></pre>"},{"location":"python/concept/#aiohttp-post","title":"<code>aiohttp</code> post","text":"<p>See parametrize</p>"},{"location":"python/concept/#pytest","title":"<code>pytest</code>","text":""},{"location":"python/concept/#parametrize","title":"Parametrize","text":"<pre><code>import pytest\n\n@pytest.mark.parametrize(\n    \"status\", [status.HTTP_200_OK, status.HTTP_226_IM_USED]\n)\n@patch(\"gateway.utils.aiohttp.ClientSession.post\")\n@pytest.mark.asyncio\nasync def test_async_post(mock_post, status):\n    request_data = {\"test\": \"test\"}\n    response_json = {\"status\": \"ok\"}\n    response = create_async_response(\n        url=test_url, status=status, content=json.dumps(response_json).encode()\n    )\n    mock_post.return_value.__aenter__.return_value = response\n    result = await async_post(url=test_url, data=request_data)\n\n    mock_post.assert_called_with(\n        test_url, headers=None, params=None, json=request_data, timeout=100\n    )\n    assert result == response_json\n</code></pre>"},{"location":"python/concept/#async","title":"<code>async</code>","text":""},{"location":"python/concept/#get-response-body","title":"Get response body","text":"<pre><code>import asyncio\n\ndef async_return(result: Any) -&gt; asyncio.Future:\n    \"\"\"Converts result to an awaitable result.\"\"\"\n    async_result = asyncio.Future()\n    async_result.set_result(result)\n    return async_result\n</code></pre>"},{"location":"python/concept/#aiohttp","title":"<code>aiohttp</code>","text":""},{"location":"python/concept/#get-response-body_1","title":"Get response body","text":"<pre><code>from aiohttp import ClientResponse\n\nasync def get_async_response_body(\n    response: ClientResponse\n) -&gt; Union[Dict[str, Any], str]:\n    \"\"\"Returns response body from aiohttp request.\"\"\"\n    if \"application/json\" in response.headers.get(\"Content-Type\"):\n        body = await response.json()\n    else:\n        body = await response.text()\n    return body\n</code></pre>"},{"location":"python/concept/#mock-response","title":"Mock response","text":"<pre><code>from unittest.mock import Mock\n\nfrom aiohttp import ClientResponse\nfrom aiohttp.helpers import TimerNoop\nfrom fastapi import status\nfrom yarl import URL\n\ndef create_async_response(\n    url: str = \"https://test.savii.io\",\n    method: str = \"GET\",\n    status: int = status.HTTP_200_OK,\n    content: bytes = b'{\"status\": \"ok\"}',\n    headers: Optional[Dict[str, Any]] = None,\n) -&gt; ClientResponse:\n    response = ClientResponse(\n        method,\n        URL(url),\n        request_info=Mock(),\n        writer=Mock(),\n        continue100=None,\n        timer=TimerNoop(),\n        traces=[],\n        loop=Mock(),\n        session=Mock(),\n    )\n    response.status = status\n    response._body = content\n    response._headers = headers or {\"Content-Type\": \"application/json\"}\n    return response\n</code></pre>"},{"location":"python/concept/#references","title":"References","text":"<p>PEP 8 Google Python Style Guide Could not import lzma module </p>"},{"location":"python/flask/","title":"Flask","text":"<pre><code>from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api, reqparse\nfrom flask_jwt import JWT, jwt_required\nfrom flask_sqlalchemy import SQLAlchemy\n\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = 'secret' # this must be secured\napi = Api(app)\n\ndb = SQLAlchemy()\n\n\n@app.before_first_request\ndef create_tables():\n    db.create_all()\n\n# MODELS\n\nclass UserModel(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    # store_id = db.Column(db.Integer, db.ForeignKey('stores.id'))\n    # store = db.relationship('StoreModel')\n\n    # items = db.relationship('ItemModel', lazy='dynamic')\n    # self.items.all()\n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    @classmethod\n    def find_by_username(cls, username, password):\n        # return User object if username and password are found in db\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        # return User object if id is found in db\n        ...\n\n    def upsert(self):\n        db.session.add(self)\n        db.session.commit()\n\n    def delete(self):\n        db.session.delete(self)\n        db.session.commit()\n\n# JWT\n# request access token from /auth with username and password payload\n# use access token for endpoints requiring JWT\n# add Authentication header with value \"JWT &lt;token&gt;\"\n\ndef authenticate(username, password):\n    user = User.find_by_username(username)\n    if user and password == user.password:\n        return user\n\n\ndef identity(payload):\n    return User.find_by_id(payload['identity'])\n\n\njwt = JWT(app, authenticate, identity)\n\n\n@app.route(\"/protected\", methods=[\"GET\"])\n@jwt_required()\ndef protected():\n    ...\n\n# RESOURCE\n# Resource automatically jsonify responses\n# http methods are implemented as methods\n# method parameters must be consistent\n\nclass Student(Resource):\n    # reqparse enforces payload keys and values\n    # it ignores keys not registered as argument\n    parser = reqparse.RequestParser()\n    parser.add_argument(\n        'username',\n        type=str,\n        required=True,\n        help='Username'\n    )\n\n    def get(self, name):\n        return {'name': name}\n\n    def post(self, name):\n        data = Student.parser.parse_args()\n        # create resource here\n        return {'status': 'Success'}, 201\n\n\napi.add_resource(Student, '/student/&lt;string:name&gt;')\n\nif __name__ == '__main__':\n    db.init_app(app)\n    app.run(debug=True, port=5000)\n</code></pre>"},{"location":"python/flask/#setup","title":"Setup","text":"<p>Install <pre><code>poetry add flask\n</code></pre></p> <p>Basic Route <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return \"&lt;p&gt;Hello, World!&lt;/p&gt;\"\n</code></pre></p> <p>Run <pre><code>export FLASK_APP=hello # hello.py\nexport FLASK_ENV=development # full dev features\nflask run\n</code></pre></p> <p>As a shortcut, if the file is named <code>app.py</code> or <code>wsgi.py</code>, you don\u2019t have to set the <code>FLASK_APP</code> environment variable. The default return content type is HTML.</p>"},{"location":"python/flask/#html-escaping","title":"HTML Escaping","text":"<pre><code>from markupsafe import escape\n\n@app.route(\"/&lt;name&gt;\")\ndef hello(name):\n    return f\"Hello, {escape(name)}!\"\n</code></pre>"},{"location":"python/flask/#variable-rules","title":"Variable Rules","text":"<pre><code>from markupsafe import escape\n\n@app.route('/user/&lt;username&gt;')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return f'User {escape(username)}'\n\n@app.route('/post/&lt;int:post_id&gt;')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return f'Post {post_id}'\n\n@app.route('/path/&lt;path:subpath&gt;')\ndef show_subpath(subpath):\n    # show the subpath after /path/\n    return f'Subpath {escape(subpath)}'\n</code></pre> <p>Converter Types <code>string</code> -- (default) accepts any text without a slash <code>int</code> -- accepts positive integers <code>float</code> -- accepts positive floating point values <code>path</code> -- like string but also accepts slashes <code>uuid</code> -- accepts UUID strings  </p>"},{"location":"python/flask/#url-building","title":"URL Building","text":"<pre><code>from flask import url_for\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/&lt;username&gt;')\ndef profile(username):\n    return f'{username}\\'s profile'\n\nwith app.test_request_context():\n    print(url_for('index'))                             # /\n    print(url_for('login'))                             # /login\n    print(url_for('login', next='/'))                   # /login?next=/\n    print(url_for('profile', username='John Doe'))      # /user/John%20Doe\n</code></pre>"},{"location":"python/flask/#http-methods","title":"HTTP Methods","text":"<pre><code>from flask import request\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        return do_the_login()\n    else:\n        return show_the_login_form()\n</code></pre>"},{"location":"python/flask/#static-files","title":"Static Files","text":"<pre><code>url_for('static', filename='style.css')\n</code></pre> <p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p>"},{"location":"python/flask/#rendering-templates","title":"Rendering Templates","text":"<pre><code>from flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n\n# /app.py\n# /templates\n#     /hello.html\n</code></pre> <p>Inside templates you also have access to the <code>config</code>, <code>request</code>, <code>session</code> and <code>g</code> objects as well as the <code>url_for()</code> and <code>get_flashed_messages()</code> functions.</p>"},{"location":"python/flask/#template-inheritance","title":"Template Inheritance","text":"<p>Base <pre><code>{% raw %}\n&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    {% block head %}\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"&gt;\n    &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n    {% endblock %}\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"content\"&gt;{% block content %}{% endblock %}&lt;/div&gt;\n    &lt;div id=\"footer\"&gt;\n      {% block footer %}\n      &amp;copy; Copyright 2010 by &lt;a href=\"http://domain.invalid/\"&gt;you&lt;/a&gt;.\n      {% endblock %}\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre></p> <p>Child <pre><code>{% raw %}\n{% extends \"layout.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n  {{ super() }}\n  &lt;style type=\"text/css\"&gt;\n    .important { color: #336699; }\n  &lt;/style&gt;\n{% endblock %}\n{% block content %}\n  &lt;h1&gt;Index&lt;/h1&gt;\n  &lt;p class=\"important\"&gt;\n    Welcome on my awesome homepage.\n{% endblock %}\n{% endraw %}\n</code></pre></p>"},{"location":"python/flask/#test","title":"Test","text":"<pre><code>from flask import request\n\nwith app.test_request_context('/hello', method='POST'):\n    # now you can do something with the request until the\n    # end of the with block, such as basic assertions:\n    assert request.path == '/hello'\n    assert request.method == 'POST'\n</code></pre>"},{"location":"python/flask/#request","title":"Request","text":"<p>Form data and query string <pre><code>from flask import request\n\n@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if valid_login(request.form['username'],\n                       request.form['password']):\n            return log_the_user_in(request.form['username'])\n        else:\n            error = 'Invalid username/password'\n    # the code below is executed if the request method\n    # was GET or the credentials were invalid\n    return render_template('login.html', error=error)\n\n# query string\n# searchword = request.args.get('key', '')\n\n# json payload\n# payload = request.get_json()\n</code></pre></p>"},{"location":"python/flask/#file-upload","title":"File upload","text":"<pre><code>from werkzeug.utils import secure_filename\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        file = request.files['the_file']\n        file.save(f\"/var/www/uploads/{secure_filename(file.filename)}\")\n    ...\n</code></pre>"},{"location":"python/flask/#cookies","title":"Cookies","text":"<p>Read <pre><code>from flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n</code></pre></p> <p>Set <pre><code>from flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n</code></pre></p> <p>Use sessions instead of cookies for better security.</p>"},{"location":"python/flask/#redirects-and-errors","title":"Redirects and Errors","text":"<pre><code>from flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n</code></pre>"},{"location":"python/flask/#error-handler","title":"Error handler","text":"<pre><code>from flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n</code></pre>"},{"location":"python/flask/#apis-with-json","title":"APIs with JSON","text":"<p>Dictionary as JSON <pre><code>@app.route(\"/me\")\ndef me_api():\n    user = get_current_user()\n    return {\n        \"username\": user.username,\n        \"theme\": user.theme,\n        \"image\": url_for(\"user_image\", filename=user.image),\n    }\n</code></pre></p> <p>JSONify other data types <pre><code>from flask import jsonify\n\n@app.route(\"/users\")\ndef users_api():\n    users = get_all_users()\n    return jsonify([user.to_json() for user in users])\n</code></pre></p>"},{"location":"python/flask/#sessions","title":"Sessions","text":"<pre><code>from flask import session\n\n# Set the secret key to some random bytes. Keep this really secret!\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return f'Logged in as {session[\"username\"]}'\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        &lt;form method=\"post\"&gt;\n            &lt;p&gt;&lt;input type=text name=username&gt;\n            &lt;p&gt;&lt;input type=submit value=Login&gt;\n        &lt;/form&gt;\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n</code></pre> <p>Flask will serialize the values in the session object into a cookie. Take caution on cookie size.</p> <p>For server-side sessions, use Flask extensions.</p>"},{"location":"python/flask/#message-flashing","title":"Message Flashing","text":"<pre><code>flash('Invalid password provided', 'error')\n\nmessages = get_flashed_messages()\n</code></pre> <p>Example</p>"},{"location":"python/flask/#logging","title":"Logging","text":"<pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')\n</code></pre>"},{"location":"python/flask/#deployment","title":"Deployment","text":"<p>Reference</p>"},{"location":"python/library/","title":"Library","text":""},{"location":"python/library/#async","title":"Async","text":"<pre><code>celery              task queue\n</code></pre>"},{"location":"python/library/#cli","title":"CLI","text":"<pre><code>click               create CLI commands  \nprogress            report progress\n</code></pre>"},{"location":"python/library/#data","title":"Data","text":"<pre><code>pandas as pd        process data  \npydantic            data validation\n</code></pre>"},{"location":"python/library/#database","title":"Database","text":"<pre><code>json                process JSON objects  \nmongoengine         MongoDB ODM  \nmotor               async MongoDB connection  \nuuid                Universally Unique Identifier\n</code></pre>"},{"location":"python/library/#tools","title":"Tools","text":"<pre><code>logging             built-in  \nstructlog           structured logging\n</code></pre>"},{"location":"python/library/#web","title":"Web","text":"<pre><code>requests           HTTP library  \ngunicorn           WSGI HTTP server  \nflask              micro web framework  \nuvicorn            ASGI HTTP server, works with gunicorn for process management\n</code></pre>"},{"location":"python/library/#test","title":"Test","text":"<pre><code>black              code formatter  \nflake8             lint  \nfreezegun          freeze time  \nisort              sort imports  \nmypy               static type checker  \nparameterized      testing with different inputs  \npytest             testing framework\n</code></pre>"},{"location":"python/requests/","title":"Requests","text":""},{"location":"python/requests/#request","title":"Request","text":"<pre><code>response = requests.get(\n    'https://api.github.com',\n    params={'q': 'requests+language:python'}, # query string; dict or list of tuples or bytes\n    headers={'Accept': 'application/vnd.github.v3.text-match+json'}, # request headers\n    timeout=1 # in seconds; or in tuple, e.g. timeout=(connect_timeout, read_timeout)\n)\n\n# data can be a dictionary, a list of tuples, bytes, or a file-like object\n# `data` parameter is for application/x-www-form-urlencoded\n# use `json` parameter for json payload\nrequests.post('https://httpbin.org/post', data={'key':'value'})\nrequests.put('https://httpbin.org/put', data={'key':'value'})\nrequests.delete('https://httpbin.org/delete')\nrequests.patch('https://httpbin.org/patch', data={'key':'value'})\nrequests.head('https://httpbin.org/get')\nrequests.options('https://httpbin.org/get')\n</code></pre>"},{"location":"python/requests/#status-code","title":"Status Code","text":"<pre><code>response.status_code\n\n# raise error without checking status code\nfrom requests.exceptions import HTTPError\ntry:\n    response = requests.get('https://api.github.com')\n    response.raise_for_status()\nexcept HTTPError as http_error:\n    ...\nexcept Exception as error:\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"python/requests/#response","title":"Response","text":"<pre><code>response.content                    # payload in btyes\nresponse.encoding = 'utf-8'         # setting an encoding when calling text property\nresponse.text                       # payload in string\nresponse.json()                     # parsed json\nresponse.headers['Content-Type']    # dict; keys are case-insensitive\n\n# accessing original request details\nresponse.request.headers['Content-Type']\nresponse.request.url\nresponse.request.body\n</code></pre>"},{"location":"python/requests/#basic-auth","title":"Basic Auth","text":"<pre><code># Authorization: Basic &lt;username:password in base64&gt;\nrequests.get('https://api.github.com/user', auth=('username', 'password'))\n\n# or\n\nfrom requests.auth import HTTPBasicAuth\nrequests.get(\n    'https://api.github.com/user',\n    auth=HTTPBasicAuth('username', 'password')\n)\n</code></pre>"},{"location":"python/requests/#timeout","title":"Timeout","text":"<pre><code>from requests.exceptions import Timeout\ntry:\n    response = requests.get('https://api.github.com', timeout=1)\nexcept Timeout:\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"python/requests/#session","title":"Session","text":"<p>Better performance due to persistence Will reuse a connection when possible</p> <pre><code># By using a context manager, you can ensure the resources used by\n# the session will be released after use\nwith requests.Session() as session:\n    session.auth = ('username', getpass())\n    # Instead of requests.get(), you'll use session.get()\n    response = session.get('https://api.github.com/user')\n\nfrom requests.adapters import HTTPAdapter\nfrom requests.exceptions import ConnectionError\n\n# max retries\ngithub_adapter = HTTPAdapter(max_retries=3)\nsession = requests.Session()\n\n# Use `github_adapter` for all requests to endpoints that start with this URL\nsession.mount('https://api.github.com', github_adapter)\n\ntry:\n    session.get('https://api.github.com')\nexcept ConnectionError as ce:\n    print(ce)\n</code></pre>"},{"location":"python/snippets/","title":"Snippets","text":""},{"location":"python/snippets/#decorators","title":"Decorators","text":""},{"location":"python/snippets/#retry","title":"Retry","text":"<p>Retry execution</p> <pre><code>def retry(ExceptionToCheck, tries=4, delay=3, backoff=2, logger=None):\n    \"\"\"Retry calling the decorated function using an exponential backoff.\n\n    Args:\n        ExceptionToCheck (Exception or tuple): the exception to check\n            may be a tuple of exceptions to check\n        tries (int): number of times to try (not retry) before giving up\n        delay (int): initial delay between retries in seconds\n        backoff (int): backoff multiplier\n            e.g. value of 2 will double the delay each retry\n        logger (logging.Logger): logger to use. If None, print\n\n    Returns:\n        function\n    \"\"\"\n\n    def deco_retry(f):\n        @wraps(f)\n        def f_retry(*args, **kwargs):\n            mtries, mdelay = tries, delay\n\n            while mtries &gt; 1:\n                try:\n                    return f(*args, **kwargs)\n                except ExceptionToCheck:\n                    msg = f'str(e), Retrying in {delay} seconds...'\n\n                    if logger:\n                        logger.warning(msg)\n                    else:\n                        print(msg)\n\n                    time.sleep(mdelay)\n                    mtries -= 1\n                    mdelay *= backoff\n\n            return f(*args, **kwargs)\n        return f_retry\n    return deco_retry\n</code></pre>"},{"location":"python/snippets/#runtime","title":"Runtime","text":"<p>Print runtime duration</p> <pre><code>import functools\nimport time\n\ndef timer(func):\n    \"\"\"Print the runtime of the decorated function\"\"\"\n    @functools.wraps(func)\n    def wrapper_timer(*args, **kwargs):\n        start_time = time.perf_counter()\n\n        value = func(*args, **kwargs)\n\n        end_time = time.perf_counter()\n        run_time = end_time - start_time\n\n        print(f\"Finished {func.__name__!r} in {run_time:.4f} secs\")\n        return value\n    return wrapper_timer\n\n@timer\ndef waste_some_time(num_times):\n    for _ in range(num_times):\n        sum([i**2 for i in range(10000)])\n</code></pre>"},{"location":"python/snippets/#debug-log","title":"Debug Log","text":"<p>Print debug logs</p> <pre><code>import functools\n\ndef debug(func):\n    \"\"\"Print the function signature and return value\"\"\"\n    @functools.wraps(func)\n    def wrapper_debug(*args, **kwargs):\n        args_repr = [repr(a) for a in args]                      \n        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]  \n\n        signature = \", \".join(args_repr + kwargs_repr)           \n        print(f\"Calling {func.__name__}({signature})\")\n\n        value = func(*args, **kwargs)\n        print(f\"{func.__name__!r} returned {value!r}\")           \n\n        return value\n    return wrapper_debug\n</code></pre>"},{"location":"python/snippets/#registry","title":"Registry","text":"<p>Register to a context</p> <pre><code>import random\nPLUGINS = dict()\n\ndef register(func):\n    \"\"\"Register a function as a plug-in\"\"\"\n    PLUGINS[func.__name__] = func\n    return func\n\n@register\ndef say_hello(name):\n    return f\"Hello {name}\"\n\n@register\ndef be_awesome(name):\n    return f\"Yo {name}, together we are the awesomest!\"\n\ndef randomly_greet(name):\n    greeter, greeter_func = random.choice(list(PLUGINS.items()))\n    print(f\"Using {greeter!r}\")\n    return greeter_func(name)\n</code></pre>"},{"location":"python/snippets/#login-required","title":"Login Required","text":"<p>Check if user is logged in</p> <pre><code>from flask import Flask, g, request, redirect, url_for\nimport functools\n\napp = Flask(__name__)\n\ndef login_required(func):\n    \"\"\"Make sure user is logged in before proceeding\"\"\"\n    @functools.wraps(func)\n    def wrapper_login_required(*args, **kwargs):\n        if g.user is None:\n            return redirect(url_for(\"login\", next=request.url))\n        return func(*args, **kwargs)\n    return wrapper_login_required\n\n@app.route(\"/secret\")\n@login_required\ndef secret():\n    ...\n</code></pre>"},{"location":"python/snippets/#singleton-class","title":"Singleton Class","text":"<p>Implement Singleton</p> <pre><code>import functools\n\ndef singleton(cls):\n    \"\"\"Make a class a Singleton class (only one instance)\"\"\"\n    @functools.wraps(cls)\n    def wrapper_singleton(*args, **kwargs):\n        if not wrapper_singleton.instance:\n            wrapper_singleton.instance = cls(*args, **kwargs)\n        return wrapper_singleton.instance\n\n    wrapper_singleton.instance = None\n    return wrapper_singleton\n\n@singleton\nclass TheOne:\n    pass\n</code></pre>"},{"location":"python/snippets/#route-json-validator","title":"Route JSON Validator","text":"<p>Validate if given arguments are available in JSON payload</p> <pre><code>from flask import Flask, request, abort\nimport functools\napp = Flask(__name__)\n\ndef validate_json(*expected_args):\n    def decorator_validate_json(func):\n        @functools.wraps(func)\n        def wrapper_validate_json(*args, **kwargs):\n            json_object = request.get_json()\n\n            for expected_arg in expected_args:\n                if expected_arg not in json_object:\n                    abort(400)\n\n            return func(*args, **kwargs)\n        return wrapper_validate_json\n    return decorator_validate_json\n\n@app.route(\"/grade\", methods=[\"POST\"])\n@validate_json(\"student_id\")\ndef update_grade():\n    json_data = request.get_json()\n    # Update database.\n    return \"success!\"\n</code></pre>"},{"location":"python/snippets/#dispatch","title":"Dispatch","text":"<p>Dispatch a function upon certain criteria</p> <pre><code>from functools import partial\n\ndef dirty_strip(value: str, to_remove: str, split_by: str) -&gt; list:\n    return value.strip(to_remove).split(split_by)\n\nsplit_square = partial(dirty_strip, to_remove='[]', split_by=',')\nsplit_circle = partial(dirty_strip, to_remove='()', split_by=',')\n\ndispatch = {\n    'app_id': lambda x: x,\n    'category': split_square,\n    'content_rating': split_circle,\n    ...\n}\n\ndata = [{ ... }]\nprocessed_data = []\n\nfor item in data:\n    converted_data = {}\n\n    for key, val in item.items():\n        converted_data[key] = dispatch[key](val)\n\n    processed_data.append(converted_data)\n</code></pre>"}]}